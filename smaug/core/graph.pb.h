// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: smaug/core/graph.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_smaug_2fcore_2fgraph_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_smaug_2fcore_2fgraph_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "smaug/core/node.pb.h"
#include "smaug/core/types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_smaug_2fcore_2fgraph_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_smaug_2fcore_2fgraph_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_smaug_2fcore_2fgraph_2eproto;
namespace smaug {
class GraphProto;
class GraphProtoDefaultTypeInternal;
extern GraphProtoDefaultTypeInternal _GraphProto_default_instance_;
}  // namespace smaug
PROTOBUF_NAMESPACE_OPEN
template<> ::smaug::GraphProto* Arena::CreateMaybeMessage<::smaug::GraphProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace smaug {

// ===================================================================

class GraphProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smaug.GraphProto) */ {
 public:
  GraphProto();
  virtual ~GraphProto();

  GraphProto(const GraphProto& from);
  GraphProto(GraphProto&& from) noexcept
    : GraphProto() {
    *this = ::std::move(from);
  }

  inline GraphProto& operator=(const GraphProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphProto& operator=(GraphProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GraphProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphProto* internal_default_instance() {
    return reinterpret_cast<const GraphProto*>(
               &_GraphProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GraphProto& a, GraphProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GraphProto* New() const final {
    return CreateMaybeMessage<GraphProto>(nullptr);
  }

  GraphProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GraphProto& from);
  void MergeFrom(const GraphProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GraphProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smaug.GraphProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_smaug_2fcore_2fgraph_2eproto);
    return ::descriptor_table_smaug_2fcore_2fgraph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 2,
    kNameFieldNumber = 1,
    kBackendFieldNumber = 3,
    kMemPolicyFieldNumber = 4,
  };
  // repeated .smaug.NodeProto nodes = 2;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::smaug::NodeProto* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smaug::NodeProto >*
      mutable_nodes();
  private:
  const ::smaug::NodeProto& _internal_nodes(int index) const;
  ::smaug::NodeProto* _internal_add_nodes();
  public:
  const ::smaug::NodeProto& nodes(int index) const;
  ::smaug::NodeProto* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smaug::NodeProto >&
      nodes() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string backend = 3;
  void clear_backend();
  const std::string& backend() const;
  void set_backend(const std::string& value);
  void set_backend(std::string&& value);
  void set_backend(const char* value);
  void set_backend(const char* value, size_t size);
  std::string* mutable_backend();
  std::string* release_backend();
  void set_allocated_backend(std::string* backend);
  private:
  const std::string& _internal_backend() const;
  void _internal_set_backend(const std::string& value);
  std::string* _internal_mutable_backend();
  public:

  // .smaug.HostMemoryAccessPolicy mem_policy = 4;
  void clear_mem_policy();
  ::smaug::HostMemoryAccessPolicy mem_policy() const;
  void set_mem_policy(::smaug::HostMemoryAccessPolicy value);
  private:
  ::smaug::HostMemoryAccessPolicy _internal_mem_policy() const;
  void _internal_set_mem_policy(::smaug::HostMemoryAccessPolicy value);
  public:

  // @@protoc_insertion_point(class_scope:smaug.GraphProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smaug::NodeProto > nodes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr backend_;
  int mem_policy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_smaug_2fcore_2fgraph_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GraphProto

// string name = 1;
inline void GraphProto::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GraphProto::name() const {
  // @@protoc_insertion_point(field_get:smaug.GraphProto.name)
  return _internal_name();
}
inline void GraphProto::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smaug.GraphProto.name)
}
inline std::string* GraphProto::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smaug.GraphProto.name)
  return _internal_mutable_name();
}
inline const std::string& GraphProto::_internal_name() const {
  return name_.GetNoArena();
}
inline void GraphProto::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GraphProto::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:smaug.GraphProto.name)
}
inline void GraphProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:smaug.GraphProto.name)
}
inline void GraphProto::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:smaug.GraphProto.name)
}
inline std::string* GraphProto::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GraphProto::release_name() {
  // @@protoc_insertion_point(field_release:smaug.GraphProto.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GraphProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:smaug.GraphProto.name)
}

// repeated .smaug.NodeProto nodes = 2;
inline int GraphProto::_internal_nodes_size() const {
  return nodes_.size();
}
inline int GraphProto::nodes_size() const {
  return _internal_nodes_size();
}
inline ::smaug::NodeProto* GraphProto::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:smaug.GraphProto.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smaug::NodeProto >*
GraphProto::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:smaug.GraphProto.nodes)
  return &nodes_;
}
inline const ::smaug::NodeProto& GraphProto::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const ::smaug::NodeProto& GraphProto::nodes(int index) const {
  // @@protoc_insertion_point(field_get:smaug.GraphProto.nodes)
  return _internal_nodes(index);
}
inline ::smaug::NodeProto* GraphProto::_internal_add_nodes() {
  return nodes_.Add();
}
inline ::smaug::NodeProto* GraphProto::add_nodes() {
  // @@protoc_insertion_point(field_add:smaug.GraphProto.nodes)
  return _internal_add_nodes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smaug::NodeProto >&
GraphProto::nodes() const {
  // @@protoc_insertion_point(field_list:smaug.GraphProto.nodes)
  return nodes_;
}

// string backend = 3;
inline void GraphProto::clear_backend() {
  backend_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GraphProto::backend() const {
  // @@protoc_insertion_point(field_get:smaug.GraphProto.backend)
  return _internal_backend();
}
inline void GraphProto::set_backend(const std::string& value) {
  _internal_set_backend(value);
  // @@protoc_insertion_point(field_set:smaug.GraphProto.backend)
}
inline std::string* GraphProto::mutable_backend() {
  // @@protoc_insertion_point(field_mutable:smaug.GraphProto.backend)
  return _internal_mutable_backend();
}
inline const std::string& GraphProto::_internal_backend() const {
  return backend_.GetNoArena();
}
inline void GraphProto::_internal_set_backend(const std::string& value) {
  
  backend_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GraphProto::set_backend(std::string&& value) {
  
  backend_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:smaug.GraphProto.backend)
}
inline void GraphProto::set_backend(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  backend_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:smaug.GraphProto.backend)
}
inline void GraphProto::set_backend(const char* value, size_t size) {
  
  backend_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:smaug.GraphProto.backend)
}
inline std::string* GraphProto::_internal_mutable_backend() {
  
  return backend_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GraphProto::release_backend() {
  // @@protoc_insertion_point(field_release:smaug.GraphProto.backend)
  
  return backend_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GraphProto::set_allocated_backend(std::string* backend) {
  if (backend != nullptr) {
    
  } else {
    
  }
  backend_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), backend);
  // @@protoc_insertion_point(field_set_allocated:smaug.GraphProto.backend)
}

// .smaug.HostMemoryAccessPolicy mem_policy = 4;
inline void GraphProto::clear_mem_policy() {
  mem_policy_ = 0;
}
inline ::smaug::HostMemoryAccessPolicy GraphProto::_internal_mem_policy() const {
  return static_cast< ::smaug::HostMemoryAccessPolicy >(mem_policy_);
}
inline ::smaug::HostMemoryAccessPolicy GraphProto::mem_policy() const {
  // @@protoc_insertion_point(field_get:smaug.GraphProto.mem_policy)
  return _internal_mem_policy();
}
inline void GraphProto::_internal_set_mem_policy(::smaug::HostMemoryAccessPolicy value) {
  
  mem_policy_ = value;
}
inline void GraphProto::set_mem_policy(::smaug::HostMemoryAccessPolicy value) {
  _internal_set_mem_policy(value);
  // @@protoc_insertion_point(field_set:smaug.GraphProto.mem_policy)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace smaug

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_smaug_2fcore_2fgraph_2eproto
