// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: smaug/core/node.proto

#include "smaug/core/node.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_smaug_2fcore_2fnode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ActivationParams_smaug_2fcore_2fnode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_smaug_2fcore_2fnode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConcatParams_smaug_2fcore_2fnode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_smaug_2fcore_2fnode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConvParams_smaug_2fcore_2fnode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_smaug_2fcore_2fnode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EluParams_smaug_2fcore_2fnode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_smaug_2fcore_2fnode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HardTanhParams_smaug_2fcore_2fnode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_smaug_2fcore_2fnode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LreluParams_smaug_2fcore_2fnode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_smaug_2fcore_2fnode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PaddingParams_smaug_2fcore_2fnode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_smaug_2fcore_2fnode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Params_smaug_2fcore_2fnode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_smaug_2fcore_2fnode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PoolParams_smaug_2fcore_2fnode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_smaug_2fcore_2fnode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SplitParams_smaug_2fcore_2fnode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_smaug_2fcore_2ftensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TensorProto_smaug_2fcore_2ftensor_2eproto;
namespace smaug {
class ConvParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConvParams> _instance;
} _ConvParams_default_instance_;
class PoolParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PoolParams> _instance;
} _PoolParams_default_instance_;
class PaddingParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PaddingParams> _instance;
} _PaddingParams_default_instance_;
class ConcatParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConcatParams> _instance;
} _ConcatParams_default_instance_;
class SplitParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SplitParams> _instance;
} _SplitParams_default_instance_;
class LreluParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LreluParams> _instance;
} _LreluParams_default_instance_;
class EluParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EluParams> _instance;
} _EluParams_default_instance_;
class HardTanhParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HardTanhParams> _instance;
} _HardTanhParams_default_instance_;
class ActivationParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActivationParams> _instance;
  const ::smaug::LreluParams* lrelu_params_;
  const ::smaug::EluParams* elu_params_;
  const ::smaug::HardTanhParams* hard_tanh_params_;
} _ActivationParams_default_instance_;
class ParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Params> _instance;
  const ::smaug::ConvParams* conv_params_;
  const ::smaug::PoolParams* pool_params_;
  const ::smaug::ConcatParams* concat_params_;
  const ::smaug::SplitParams* split_params_;
  const ::smaug::PaddingParams* padding_params_;
} _Params_default_instance_;
class NodeProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeProto> _instance;
} _NodeProto_default_instance_;
}  // namespace smaug
static void InitDefaultsscc_info_ActivationParams_smaug_2fcore_2fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::smaug::_ActivationParams_default_instance_;
    new (ptr) ::smaug::ActivationParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::smaug::ActivationParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ActivationParams_smaug_2fcore_2fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ActivationParams_smaug_2fcore_2fnode_2eproto}, {
      &scc_info_LreluParams_smaug_2fcore_2fnode_2eproto.base,
      &scc_info_EluParams_smaug_2fcore_2fnode_2eproto.base,
      &scc_info_HardTanhParams_smaug_2fcore_2fnode_2eproto.base,}};

static void InitDefaultsscc_info_ConcatParams_smaug_2fcore_2fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::smaug::_ConcatParams_default_instance_;
    new (ptr) ::smaug::ConcatParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::smaug::ConcatParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConcatParams_smaug_2fcore_2fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConcatParams_smaug_2fcore_2fnode_2eproto}, {}};

static void InitDefaultsscc_info_ConvParams_smaug_2fcore_2fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::smaug::_ConvParams_default_instance_;
    new (ptr) ::smaug::ConvParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::smaug::ConvParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConvParams_smaug_2fcore_2fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConvParams_smaug_2fcore_2fnode_2eproto}, {}};

static void InitDefaultsscc_info_EluParams_smaug_2fcore_2fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::smaug::_EluParams_default_instance_;
    new (ptr) ::smaug::EluParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::smaug::EluParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EluParams_smaug_2fcore_2fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EluParams_smaug_2fcore_2fnode_2eproto}, {}};

static void InitDefaultsscc_info_HardTanhParams_smaug_2fcore_2fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::smaug::_HardTanhParams_default_instance_;
    new (ptr) ::smaug::HardTanhParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::smaug::HardTanhParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HardTanhParams_smaug_2fcore_2fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HardTanhParams_smaug_2fcore_2fnode_2eproto}, {}};

static void InitDefaultsscc_info_LreluParams_smaug_2fcore_2fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::smaug::_LreluParams_default_instance_;
    new (ptr) ::smaug::LreluParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::smaug::LreluParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LreluParams_smaug_2fcore_2fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LreluParams_smaug_2fcore_2fnode_2eproto}, {}};

static void InitDefaultsscc_info_NodeProto_smaug_2fcore_2fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::smaug::_NodeProto_default_instance_;
    new (ptr) ::smaug::NodeProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::smaug::NodeProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NodeProto_smaug_2fcore_2fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_NodeProto_smaug_2fcore_2fnode_2eproto}, {
      &scc_info_TensorProto_smaug_2fcore_2ftensor_2eproto.base,
      &scc_info_Params_smaug_2fcore_2fnode_2eproto.base,}};

static void InitDefaultsscc_info_PaddingParams_smaug_2fcore_2fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::smaug::_PaddingParams_default_instance_;
    new (ptr) ::smaug::PaddingParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::smaug::PaddingParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PaddingParams_smaug_2fcore_2fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PaddingParams_smaug_2fcore_2fnode_2eproto}, {}};

static void InitDefaultsscc_info_Params_smaug_2fcore_2fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::smaug::_Params_default_instance_;
    new (ptr) ::smaug::Params();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::smaug::Params::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Params_smaug_2fcore_2fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_Params_smaug_2fcore_2fnode_2eproto}, {
      &scc_info_ConvParams_smaug_2fcore_2fnode_2eproto.base,
      &scc_info_PoolParams_smaug_2fcore_2fnode_2eproto.base,
      &scc_info_ConcatParams_smaug_2fcore_2fnode_2eproto.base,
      &scc_info_SplitParams_smaug_2fcore_2fnode_2eproto.base,
      &scc_info_PaddingParams_smaug_2fcore_2fnode_2eproto.base,
      &scc_info_ActivationParams_smaug_2fcore_2fnode_2eproto.base,}};

static void InitDefaultsscc_info_PoolParams_smaug_2fcore_2fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::smaug::_PoolParams_default_instance_;
    new (ptr) ::smaug::PoolParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::smaug::PoolParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PoolParams_smaug_2fcore_2fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PoolParams_smaug_2fcore_2fnode_2eproto}, {}};

static void InitDefaultsscc_info_SplitParams_smaug_2fcore_2fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::smaug::_SplitParams_default_instance_;
    new (ptr) ::smaug::SplitParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::smaug::SplitParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SplitParams_smaug_2fcore_2fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SplitParams_smaug_2fcore_2fnode_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_smaug_2fcore_2fnode_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_smaug_2fcore_2fnode_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_smaug_2fcore_2fnode_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_smaug_2fcore_2fnode_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::smaug::ConvParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::smaug::ConvParams, padding_),
  PROTOBUF_FIELD_OFFSET(::smaug::ConvParams, stride_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::smaug::PoolParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::smaug::PoolParams, stride_),
  PROTOBUF_FIELD_OFFSET(::smaug::PoolParams, pool_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::smaug::PaddingParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::smaug::PaddingParams, padding_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::smaug::ConcatParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::smaug::ConcatParams, concat_axis_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::smaug::SplitParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::smaug::SplitParams, split_axis_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::smaug::LreluParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::smaug::LreluParams, slope_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::smaug::EluParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::smaug::EluParams, alpha_),
  PROTOBUF_FIELD_OFFSET(::smaug::EluParams, lambda_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::smaug::HardTanhParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::smaug::HardTanhParams, min_),
  PROTOBUF_FIELD_OFFSET(::smaug::HardTanhParams, max_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::smaug::ActivationParams, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::smaug::ActivationParams, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::smaug::ActivationParams, activation_),
  offsetof(::smaug::ActivationParamsDefaultTypeInternal, lrelu_params_),
  offsetof(::smaug::ActivationParamsDefaultTypeInternal, elu_params_),
  offsetof(::smaug::ActivationParamsDefaultTypeInternal, hard_tanh_params_),
  PROTOBUF_FIELD_OFFSET(::smaug::ActivationParams, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::smaug::Params, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::smaug::Params, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::smaug::ParamsDefaultTypeInternal, conv_params_),
  offsetof(::smaug::ParamsDefaultTypeInternal, pool_params_),
  offsetof(::smaug::ParamsDefaultTypeInternal, concat_params_),
  offsetof(::smaug::ParamsDefaultTypeInternal, split_params_),
  offsetof(::smaug::ParamsDefaultTypeInternal, padding_params_),
  PROTOBUF_FIELD_OFFSET(::smaug::Params, act_params_),
  PROTOBUF_FIELD_OFFSET(::smaug::Params, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::smaug::NodeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::smaug::NodeProto, name_),
  PROTOBUF_FIELD_OFFSET(::smaug::NodeProto, op_),
  PROTOBUF_FIELD_OFFSET(::smaug::NodeProto, parents_),
  PROTOBUF_FIELD_OFFSET(::smaug::NodeProto, src_tensors_indices_),
  PROTOBUF_FIELD_OFFSET(::smaug::NodeProto, input_tensors_),
  PROTOBUF_FIELD_OFFSET(::smaug::NodeProto, output_tensors_),
  PROTOBUF_FIELD_OFFSET(::smaug::NodeProto, params_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::smaug::ConvParams)},
  { 7, -1, sizeof(::smaug::PoolParams)},
  { 14, -1, sizeof(::smaug::PaddingParams)},
  { 20, -1, sizeof(::smaug::ConcatParams)},
  { 26, -1, sizeof(::smaug::SplitParams)},
  { 32, -1, sizeof(::smaug::LreluParams)},
  { 38, -1, sizeof(::smaug::EluParams)},
  { 45, -1, sizeof(::smaug::HardTanhParams)},
  { 52, -1, sizeof(::smaug::ActivationParams)},
  { 62, -1, sizeof(::smaug::Params)},
  { 74, -1, sizeof(::smaug::NodeProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::smaug::_ConvParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::smaug::_PoolParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::smaug::_PaddingParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::smaug::_ConcatParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::smaug::_SplitParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::smaug::_LreluParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::smaug::_EluParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::smaug::_HardTanhParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::smaug::_ActivationParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::smaug::_Params_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::smaug::_NodeProto_default_instance_),
};

const char descriptor_table_protodef_smaug_2fcore_2fnode_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025smaug/core/node.proto\022\005smaug\032\027smaug/co"
  "re/tensor.proto\032\026smaug/core/types.proto\""
  "A\n\nConvParams\022#\n\007padding\030\001 \001(\0162\022.smaug.P"
  "addingType\022\016\n\006stride\030\002 \003(\005\"/\n\nPoolParams"
  "\022\016\n\006stride\030\001 \003(\005\022\021\n\tpool_size\030\002 \003(\005\"%\n\rP"
  "addingParams\022\024\n\014padding_size\030\001 \003(\005\"#\n\014Co"
  "ncatParams\022\023\n\013concat_axis\030\001 \001(\005\"!\n\013Split"
  "Params\022\022\n\nsplit_axis\030\001 \001(\005\"\034\n\013LreluParam"
  "s\022\r\n\005slope\030\001 \001(\002\"0\n\tEluParams\022\r\n\005alpha\030\001"
  " \001(\002\022\024\n\014lambda_param\030\002 \001(\002\"*\n\016HardTanhPa"
  "rams\022\013\n\003min\030\001 \001(\002\022\013\n\003max\030\002 \001(\002\"\305\001\n\020Activ"
  "ationParams\022!\n\nactivation\030\001 \001(\0162\r.smaug."
  "OpType\022*\n\014lrelu_params\030\002 \001(\0132\022.smaug.Lre"
  "luParamsH\000\022&\n\nelu_params\030\003 \001(\0132\020.smaug.E"
  "luParamsH\000\0221\n\020hard_tanh_params\030\004 \001(\0132\025.s"
  "maug.HardTanhParamsH\000B\007\n\005value\"\234\002\n\006Param"
  "s\022(\n\013conv_params\030\001 \001(\0132\021.smaug.ConvParam"
  "sH\000\022(\n\013pool_params\030\002 \001(\0132\021.smaug.PoolPar"
  "amsH\000\022,\n\rconcat_params\030\004 \001(\0132\023.smaug.Con"
  "catParamsH\000\022*\n\014split_params\030\005 \001(\0132\022.smau"
  "g.SplitParamsH\000\022.\n\016padding_params\030\006 \001(\0132"
  "\024.smaug.PaddingParamsH\000\022+\n\nact_params\030\003 "
  "\001(\0132\027.smaug.ActivationParamsB\007\n\005value\"\330\001"
  "\n\tNodeProto\022\014\n\004name\030\001 \001(\t\022\031\n\002op\030\002 \001(\0162\r."
  "smaug.OpType\022\017\n\007parents\030\003 \003(\t\022\033\n\023src_ten"
  "sors_indices\030\005 \003(\005\022)\n\rinput_tensors\030\006 \003("
  "\0132\022.smaug.TensorProto\022*\n\016output_tensors\030"
  "\007 \003(\0132\022.smaug.TensorProto\022\035\n\006params\030\010 \001("
  "\0132\r.smaug.Paramsb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_smaug_2fcore_2fnode_2eproto_deps[2] = {
  &::descriptor_table_smaug_2fcore_2ftensor_2eproto,
  &::descriptor_table_smaug_2fcore_2ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_smaug_2fcore_2fnode_2eproto_sccs[11] = {
  &scc_info_ActivationParams_smaug_2fcore_2fnode_2eproto.base,
  &scc_info_ConcatParams_smaug_2fcore_2fnode_2eproto.base,
  &scc_info_ConvParams_smaug_2fcore_2fnode_2eproto.base,
  &scc_info_EluParams_smaug_2fcore_2fnode_2eproto.base,
  &scc_info_HardTanhParams_smaug_2fcore_2fnode_2eproto.base,
  &scc_info_LreluParams_smaug_2fcore_2fnode_2eproto.base,
  &scc_info_NodeProto_smaug_2fcore_2fnode_2eproto.base,
  &scc_info_PaddingParams_smaug_2fcore_2fnode_2eproto.base,
  &scc_info_Params_smaug_2fcore_2fnode_2eproto.base,
  &scc_info_PoolParams_smaug_2fcore_2fnode_2eproto.base,
  &scc_info_SplitParams_smaug_2fcore_2fnode_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_smaug_2fcore_2fnode_2eproto_once;
static bool descriptor_table_smaug_2fcore_2fnode_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_smaug_2fcore_2fnode_2eproto = {
  &descriptor_table_smaug_2fcore_2fnode_2eproto_initialized, descriptor_table_protodef_smaug_2fcore_2fnode_2eproto, "smaug/core/node.proto", 1144,
  &descriptor_table_smaug_2fcore_2fnode_2eproto_once, descriptor_table_smaug_2fcore_2fnode_2eproto_sccs, descriptor_table_smaug_2fcore_2fnode_2eproto_deps, 11, 2,
  schemas, file_default_instances, TableStruct_smaug_2fcore_2fnode_2eproto::offsets,
  file_level_metadata_smaug_2fcore_2fnode_2eproto, 11, file_level_enum_descriptors_smaug_2fcore_2fnode_2eproto, file_level_service_descriptors_smaug_2fcore_2fnode_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_smaug_2fcore_2fnode_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_smaug_2fcore_2fnode_2eproto), true);
namespace smaug {

// ===================================================================

void ConvParams::InitAsDefaultInstance() {
}
class ConvParams::_Internal {
 public:
};

ConvParams::ConvParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:smaug.ConvParams)
}
ConvParams::ConvParams(const ConvParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      stride_(from.stride_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  padding_ = from.padding_;
  // @@protoc_insertion_point(copy_constructor:smaug.ConvParams)
}

void ConvParams::SharedCtor() {
  padding_ = 0;
}

ConvParams::~ConvParams() {
  // @@protoc_insertion_point(destructor:smaug.ConvParams)
  SharedDtor();
}

void ConvParams::SharedDtor() {
}

void ConvParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConvParams& ConvParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConvParams_smaug_2fcore_2fnode_2eproto.base);
  return *internal_default_instance();
}


void ConvParams::Clear() {
// @@protoc_insertion_point(message_clear_start:smaug.ConvParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stride_.Clear();
  padding_ = 0;
  _internal_metadata_.Clear();
}

const char* ConvParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .smaug.PaddingType padding = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_padding(static_cast<::smaug::PaddingType>(val));
        } else goto handle_unusual;
        continue;
      // repeated int32 stride = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_stride(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_stride(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConvParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:smaug.ConvParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .smaug.PaddingType padding = 1;
  if (this->padding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_padding(), target);
  }

  // repeated int32 stride = 2;
  {
    int byte_size = _stride_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_stride(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smaug.ConvParams)
  return target;
}

size_t ConvParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:smaug.ConvParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 stride = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->stride_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _stride_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .smaug.PaddingType padding = 1;
  if (this->padding() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_padding());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConvParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:smaug.ConvParams)
  GOOGLE_DCHECK_NE(&from, this);
  const ConvParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConvParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:smaug.ConvParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:smaug.ConvParams)
    MergeFrom(*source);
  }
}

void ConvParams::MergeFrom(const ConvParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:smaug.ConvParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stride_.MergeFrom(from.stride_);
  if (from.padding() != 0) {
    _internal_set_padding(from._internal_padding());
  }
}

void ConvParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:smaug.ConvParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvParams::CopyFrom(const ConvParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smaug.ConvParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvParams::IsInitialized() const {
  return true;
}

void ConvParams::InternalSwap(ConvParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  stride_.InternalSwap(&other->stride_);
  swap(padding_, other->padding_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConvParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PoolParams::InitAsDefaultInstance() {
}
class PoolParams::_Internal {
 public:
};

PoolParams::PoolParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:smaug.PoolParams)
}
PoolParams::PoolParams(const PoolParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      stride_(from.stride_),
      pool_size_(from.pool_size_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:smaug.PoolParams)
}

void PoolParams::SharedCtor() {
}

PoolParams::~PoolParams() {
  // @@protoc_insertion_point(destructor:smaug.PoolParams)
  SharedDtor();
}

void PoolParams::SharedDtor() {
}

void PoolParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PoolParams& PoolParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PoolParams_smaug_2fcore_2fnode_2eproto.base);
  return *internal_default_instance();
}


void PoolParams::Clear() {
// @@protoc_insertion_point(message_clear_start:smaug.PoolParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stride_.Clear();
  pool_size_.Clear();
  _internal_metadata_.Clear();
}

const char* PoolParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 stride = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_stride(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_stride(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 pool_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_pool_size(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_pool_size(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoolParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:smaug.PoolParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 stride = 1;
  {
    int byte_size = _stride_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_stride(), byte_size, target);
    }
  }

  // repeated int32 pool_size = 2;
  {
    int byte_size = _pool_size_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_pool_size(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smaug.PoolParams)
  return target;
}

size_t PoolParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:smaug.PoolParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 stride = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->stride_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _stride_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 pool_size = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->pool_size_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pool_size_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoolParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:smaug.PoolParams)
  GOOGLE_DCHECK_NE(&from, this);
  const PoolParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PoolParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:smaug.PoolParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:smaug.PoolParams)
    MergeFrom(*source);
  }
}

void PoolParams::MergeFrom(const PoolParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:smaug.PoolParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stride_.MergeFrom(from.stride_);
  pool_size_.MergeFrom(from.pool_size_);
}

void PoolParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:smaug.PoolParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoolParams::CopyFrom(const PoolParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smaug.PoolParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoolParams::IsInitialized() const {
  return true;
}

void PoolParams::InternalSwap(PoolParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  stride_.InternalSwap(&other->stride_);
  pool_size_.InternalSwap(&other->pool_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PoolParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PaddingParams::InitAsDefaultInstance() {
}
class PaddingParams::_Internal {
 public:
};

PaddingParams::PaddingParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:smaug.PaddingParams)
}
PaddingParams::PaddingParams(const PaddingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      padding_size_(from.padding_size_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:smaug.PaddingParams)
}

void PaddingParams::SharedCtor() {
}

PaddingParams::~PaddingParams() {
  // @@protoc_insertion_point(destructor:smaug.PaddingParams)
  SharedDtor();
}

void PaddingParams::SharedDtor() {
}

void PaddingParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PaddingParams& PaddingParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PaddingParams_smaug_2fcore_2fnode_2eproto.base);
  return *internal_default_instance();
}


void PaddingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:smaug.PaddingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  padding_size_.Clear();
  _internal_metadata_.Clear();
}

const char* PaddingParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 padding_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_padding_size(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_padding_size(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PaddingParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:smaug.PaddingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 padding_size = 1;
  {
    int byte_size = _padding_size_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_padding_size(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smaug.PaddingParams)
  return target;
}

size_t PaddingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:smaug.PaddingParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 padding_size = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->padding_size_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _padding_size_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PaddingParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:smaug.PaddingParams)
  GOOGLE_DCHECK_NE(&from, this);
  const PaddingParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PaddingParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:smaug.PaddingParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:smaug.PaddingParams)
    MergeFrom(*source);
  }
}

void PaddingParams::MergeFrom(const PaddingParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:smaug.PaddingParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  padding_size_.MergeFrom(from.padding_size_);
}

void PaddingParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:smaug.PaddingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PaddingParams::CopyFrom(const PaddingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smaug.PaddingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaddingParams::IsInitialized() const {
  return true;
}

void PaddingParams::InternalSwap(PaddingParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  padding_size_.InternalSwap(&other->padding_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PaddingParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConcatParams::InitAsDefaultInstance() {
}
class ConcatParams::_Internal {
 public:
};

ConcatParams::ConcatParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:smaug.ConcatParams)
}
ConcatParams::ConcatParams(const ConcatParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  concat_axis_ = from.concat_axis_;
  // @@protoc_insertion_point(copy_constructor:smaug.ConcatParams)
}

void ConcatParams::SharedCtor() {
  concat_axis_ = 0;
}

ConcatParams::~ConcatParams() {
  // @@protoc_insertion_point(destructor:smaug.ConcatParams)
  SharedDtor();
}

void ConcatParams::SharedDtor() {
}

void ConcatParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConcatParams& ConcatParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConcatParams_smaug_2fcore_2fnode_2eproto.base);
  return *internal_default_instance();
}


void ConcatParams::Clear() {
// @@protoc_insertion_point(message_clear_start:smaug.ConcatParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concat_axis_ = 0;
  _internal_metadata_.Clear();
}

const char* ConcatParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 concat_axis = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          concat_axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConcatParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:smaug.ConcatParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 concat_axis = 1;
  if (this->concat_axis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_concat_axis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smaug.ConcatParams)
  return target;
}

size_t ConcatParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:smaug.ConcatParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 concat_axis = 1;
  if (this->concat_axis() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_concat_axis());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConcatParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:smaug.ConcatParams)
  GOOGLE_DCHECK_NE(&from, this);
  const ConcatParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConcatParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:smaug.ConcatParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:smaug.ConcatParams)
    MergeFrom(*source);
  }
}

void ConcatParams::MergeFrom(const ConcatParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:smaug.ConcatParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.concat_axis() != 0) {
    _internal_set_concat_axis(from._internal_concat_axis());
  }
}

void ConcatParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:smaug.ConcatParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConcatParams::CopyFrom(const ConcatParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smaug.ConcatParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConcatParams::IsInitialized() const {
  return true;
}

void ConcatParams::InternalSwap(ConcatParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(concat_axis_, other->concat_axis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConcatParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SplitParams::InitAsDefaultInstance() {
}
class SplitParams::_Internal {
 public:
};

SplitParams::SplitParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:smaug.SplitParams)
}
SplitParams::SplitParams(const SplitParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  split_axis_ = from.split_axis_;
  // @@protoc_insertion_point(copy_constructor:smaug.SplitParams)
}

void SplitParams::SharedCtor() {
  split_axis_ = 0;
}

SplitParams::~SplitParams() {
  // @@protoc_insertion_point(destructor:smaug.SplitParams)
  SharedDtor();
}

void SplitParams::SharedDtor() {
}

void SplitParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SplitParams& SplitParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SplitParams_smaug_2fcore_2fnode_2eproto.base);
  return *internal_default_instance();
}


void SplitParams::Clear() {
// @@protoc_insertion_point(message_clear_start:smaug.SplitParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  split_axis_ = 0;
  _internal_metadata_.Clear();
}

const char* SplitParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 split_axis = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          split_axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SplitParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:smaug.SplitParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 split_axis = 1;
  if (this->split_axis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_split_axis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smaug.SplitParams)
  return target;
}

size_t SplitParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:smaug.SplitParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 split_axis = 1;
  if (this->split_axis() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_split_axis());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SplitParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:smaug.SplitParams)
  GOOGLE_DCHECK_NE(&from, this);
  const SplitParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SplitParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:smaug.SplitParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:smaug.SplitParams)
    MergeFrom(*source);
  }
}

void SplitParams::MergeFrom(const SplitParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:smaug.SplitParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.split_axis() != 0) {
    _internal_set_split_axis(from._internal_split_axis());
  }
}

void SplitParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:smaug.SplitParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitParams::CopyFrom(const SplitParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smaug.SplitParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitParams::IsInitialized() const {
  return true;
}

void SplitParams::InternalSwap(SplitParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(split_axis_, other->split_axis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SplitParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LreluParams::InitAsDefaultInstance() {
}
class LreluParams::_Internal {
 public:
};

LreluParams::LreluParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:smaug.LreluParams)
}
LreluParams::LreluParams(const LreluParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  slope_ = from.slope_;
  // @@protoc_insertion_point(copy_constructor:smaug.LreluParams)
}

void LreluParams::SharedCtor() {
  slope_ = 0;
}

LreluParams::~LreluParams() {
  // @@protoc_insertion_point(destructor:smaug.LreluParams)
  SharedDtor();
}

void LreluParams::SharedDtor() {
}

void LreluParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LreluParams& LreluParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LreluParams_smaug_2fcore_2fnode_2eproto.base);
  return *internal_default_instance();
}


void LreluParams::Clear() {
// @@protoc_insertion_point(message_clear_start:smaug.LreluParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slope_ = 0;
  _internal_metadata_.Clear();
}

const char* LreluParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float slope = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          slope_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LreluParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:smaug.LreluParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float slope = 1;
  if (!(this->slope() <= 0 && this->slope() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_slope(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smaug.LreluParams)
  return target;
}

size_t LreluParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:smaug.LreluParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float slope = 1;
  if (!(this->slope() <= 0 && this->slope() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LreluParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:smaug.LreluParams)
  GOOGLE_DCHECK_NE(&from, this);
  const LreluParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LreluParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:smaug.LreluParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:smaug.LreluParams)
    MergeFrom(*source);
  }
}

void LreluParams::MergeFrom(const LreluParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:smaug.LreluParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.slope() <= 0 && from.slope() >= 0)) {
    _internal_set_slope(from._internal_slope());
  }
}

void LreluParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:smaug.LreluParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LreluParams::CopyFrom(const LreluParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smaug.LreluParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LreluParams::IsInitialized() const {
  return true;
}

void LreluParams::InternalSwap(LreluParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(slope_, other->slope_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LreluParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EluParams::InitAsDefaultInstance() {
}
class EluParams::_Internal {
 public:
};

EluParams::EluParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:smaug.EluParams)
}
EluParams::EluParams(const EluParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&alpha_, &from.alpha_,
    static_cast<size_t>(reinterpret_cast<char*>(&lambda_param_) -
    reinterpret_cast<char*>(&alpha_)) + sizeof(lambda_param_));
  // @@protoc_insertion_point(copy_constructor:smaug.EluParams)
}

void EluParams::SharedCtor() {
  ::memset(&alpha_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lambda_param_) -
      reinterpret_cast<char*>(&alpha_)) + sizeof(lambda_param_));
}

EluParams::~EluParams() {
  // @@protoc_insertion_point(destructor:smaug.EluParams)
  SharedDtor();
}

void EluParams::SharedDtor() {
}

void EluParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EluParams& EluParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EluParams_smaug_2fcore_2fnode_2eproto.base);
  return *internal_default_instance();
}


void EluParams::Clear() {
// @@protoc_insertion_point(message_clear_start:smaug.EluParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&alpha_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lambda_param_) -
      reinterpret_cast<char*>(&alpha_)) + sizeof(lambda_param_));
  _internal_metadata_.Clear();
}

const char* EluParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float alpha = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float lambda_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          lambda_param_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EluParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:smaug.EluParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float alpha = 1;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_alpha(), target);
  }

  // float lambda_param = 2;
  if (!(this->lambda_param() <= 0 && this->lambda_param() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_lambda_param(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smaug.EluParams)
  return target;
}

size_t EluParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:smaug.EluParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float alpha = 1;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    total_size += 1 + 4;
  }

  // float lambda_param = 2;
  if (!(this->lambda_param() <= 0 && this->lambda_param() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EluParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:smaug.EluParams)
  GOOGLE_DCHECK_NE(&from, this);
  const EluParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EluParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:smaug.EluParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:smaug.EluParams)
    MergeFrom(*source);
  }
}

void EluParams::MergeFrom(const EluParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:smaug.EluParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.alpha() <= 0 && from.alpha() >= 0)) {
    _internal_set_alpha(from._internal_alpha());
  }
  if (!(from.lambda_param() <= 0 && from.lambda_param() >= 0)) {
    _internal_set_lambda_param(from._internal_lambda_param());
  }
}

void EluParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:smaug.EluParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EluParams::CopyFrom(const EluParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smaug.EluParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EluParams::IsInitialized() const {
  return true;
}

void EluParams::InternalSwap(EluParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(alpha_, other->alpha_);
  swap(lambda_param_, other->lambda_param_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EluParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HardTanhParams::InitAsDefaultInstance() {
}
class HardTanhParams::_Internal {
 public:
};

HardTanhParams::HardTanhParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:smaug.HardTanhParams)
}
HardTanhParams::HardTanhParams(const HardTanhParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:smaug.HardTanhParams)
}

void HardTanhParams::SharedCtor() {
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&min_)) + sizeof(max_));
}

HardTanhParams::~HardTanhParams() {
  // @@protoc_insertion_point(destructor:smaug.HardTanhParams)
  SharedDtor();
}

void HardTanhParams::SharedDtor() {
}

void HardTanhParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HardTanhParams& HardTanhParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HardTanhParams_smaug_2fcore_2fnode_2eproto.base);
  return *internal_default_instance();
}


void HardTanhParams::Clear() {
// @@protoc_insertion_point(message_clear_start:smaug.HardTanhParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&min_)) + sizeof(max_));
  _internal_metadata_.Clear();
}

const char* HardTanhParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HardTanhParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:smaug.HardTanhParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float min = 1;
  if (!(this->min() <= 0 && this->min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_min(), target);
  }

  // float max = 2;
  if (!(this->max() <= 0 && this->max() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smaug.HardTanhParams)
  return target;
}

size_t HardTanhParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:smaug.HardTanhParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float min = 1;
  if (!(this->min() <= 0 && this->min() >= 0)) {
    total_size += 1 + 4;
  }

  // float max = 2;
  if (!(this->max() <= 0 && this->max() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HardTanhParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:smaug.HardTanhParams)
  GOOGLE_DCHECK_NE(&from, this);
  const HardTanhParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HardTanhParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:smaug.HardTanhParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:smaug.HardTanhParams)
    MergeFrom(*source);
  }
}

void HardTanhParams::MergeFrom(const HardTanhParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:smaug.HardTanhParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.min() <= 0 && from.min() >= 0)) {
    _internal_set_min(from._internal_min());
  }
  if (!(from.max() <= 0 && from.max() >= 0)) {
    _internal_set_max(from._internal_max());
  }
}

void HardTanhParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:smaug.HardTanhParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HardTanhParams::CopyFrom(const HardTanhParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smaug.HardTanhParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HardTanhParams::IsInitialized() const {
  return true;
}

void HardTanhParams::InternalSwap(HardTanhParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(min_, other->min_);
  swap(max_, other->max_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HardTanhParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActivationParams::InitAsDefaultInstance() {
  ::smaug::_ActivationParams_default_instance_.lrelu_params_ = const_cast< ::smaug::LreluParams*>(
      ::smaug::LreluParams::internal_default_instance());
  ::smaug::_ActivationParams_default_instance_.elu_params_ = const_cast< ::smaug::EluParams*>(
      ::smaug::EluParams::internal_default_instance());
  ::smaug::_ActivationParams_default_instance_.hard_tanh_params_ = const_cast< ::smaug::HardTanhParams*>(
      ::smaug::HardTanhParams::internal_default_instance());
}
class ActivationParams::_Internal {
 public:
  static const ::smaug::LreluParams& lrelu_params(const ActivationParams* msg);
  static const ::smaug::EluParams& elu_params(const ActivationParams* msg);
  static const ::smaug::HardTanhParams& hard_tanh_params(const ActivationParams* msg);
};

const ::smaug::LreluParams&
ActivationParams::_Internal::lrelu_params(const ActivationParams* msg) {
  return *msg->value_.lrelu_params_;
}
const ::smaug::EluParams&
ActivationParams::_Internal::elu_params(const ActivationParams* msg) {
  return *msg->value_.elu_params_;
}
const ::smaug::HardTanhParams&
ActivationParams::_Internal::hard_tanh_params(const ActivationParams* msg) {
  return *msg->value_.hard_tanh_params_;
}
void ActivationParams::set_allocated_lrelu_params(::smaug::LreluParams* lrelu_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (lrelu_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lrelu_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lrelu_params, submessage_arena);
    }
    set_has_lrelu_params();
    value_.lrelu_params_ = lrelu_params;
  }
  // @@protoc_insertion_point(field_set_allocated:smaug.ActivationParams.lrelu_params)
}
void ActivationParams::set_allocated_elu_params(::smaug::EluParams* elu_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (elu_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      elu_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, elu_params, submessage_arena);
    }
    set_has_elu_params();
    value_.elu_params_ = elu_params;
  }
  // @@protoc_insertion_point(field_set_allocated:smaug.ActivationParams.elu_params)
}
void ActivationParams::set_allocated_hard_tanh_params(::smaug::HardTanhParams* hard_tanh_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (hard_tanh_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hard_tanh_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hard_tanh_params, submessage_arena);
    }
    set_has_hard_tanh_params();
    value_.hard_tanh_params_ = hard_tanh_params;
  }
  // @@protoc_insertion_point(field_set_allocated:smaug.ActivationParams.hard_tanh_params)
}
ActivationParams::ActivationParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:smaug.ActivationParams)
}
ActivationParams::ActivationParams(const ActivationParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  activation_ = from.activation_;
  clear_has_value();
  switch (from.value_case()) {
    case kLreluParams: {
      _internal_mutable_lrelu_params()->::smaug::LreluParams::MergeFrom(from._internal_lrelu_params());
      break;
    }
    case kEluParams: {
      _internal_mutable_elu_params()->::smaug::EluParams::MergeFrom(from._internal_elu_params());
      break;
    }
    case kHardTanhParams: {
      _internal_mutable_hard_tanh_params()->::smaug::HardTanhParams::MergeFrom(from._internal_hard_tanh_params());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:smaug.ActivationParams)
}

void ActivationParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActivationParams_smaug_2fcore_2fnode_2eproto.base);
  activation_ = 0;
  clear_has_value();
}

ActivationParams::~ActivationParams() {
  // @@protoc_insertion_point(destructor:smaug.ActivationParams)
  SharedDtor();
}

void ActivationParams::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void ActivationParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivationParams& ActivationParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActivationParams_smaug_2fcore_2fnode_2eproto.base);
  return *internal_default_instance();
}


void ActivationParams::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:smaug.ActivationParams)
  switch (value_case()) {
    case kLreluParams: {
      delete value_.lrelu_params_;
      break;
    }
    case kEluParams: {
      delete value_.elu_params_;
      break;
    }
    case kHardTanhParams: {
      delete value_.hard_tanh_params_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void ActivationParams::Clear() {
// @@protoc_insertion_point(message_clear_start:smaug.ActivationParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  activation_ = 0;
  clear_value();
  _internal_metadata_.Clear();
}

const char* ActivationParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .smaug.OpType activation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_activation(static_cast<::smaug::OpType>(val));
        } else goto handle_unusual;
        continue;
      // .smaug.LreluParams lrelu_params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lrelu_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .smaug.EluParams elu_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_elu_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .smaug.HardTanhParams hard_tanh_params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_hard_tanh_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActivationParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:smaug.ActivationParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .smaug.OpType activation = 1;
  if (this->activation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_activation(), target);
  }

  // .smaug.LreluParams lrelu_params = 2;
  if (_internal_has_lrelu_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lrelu_params(this), target, stream);
  }

  // .smaug.EluParams elu_params = 3;
  if (_internal_has_elu_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::elu_params(this), target, stream);
  }

  // .smaug.HardTanhParams hard_tanh_params = 4;
  if (_internal_has_hard_tanh_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::hard_tanh_params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smaug.ActivationParams)
  return target;
}

size_t ActivationParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:smaug.ActivationParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .smaug.OpType activation = 1;
  if (this->activation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_activation());
  }

  switch (value_case()) {
    // .smaug.LreluParams lrelu_params = 2;
    case kLreluParams: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.lrelu_params_);
      break;
    }
    // .smaug.EluParams elu_params = 3;
    case kEluParams: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.elu_params_);
      break;
    }
    // .smaug.HardTanhParams hard_tanh_params = 4;
    case kHardTanhParams: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.hard_tanh_params_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivationParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:smaug.ActivationParams)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivationParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActivationParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:smaug.ActivationParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:smaug.ActivationParams)
    MergeFrom(*source);
  }
}

void ActivationParams::MergeFrom(const ActivationParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:smaug.ActivationParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.activation() != 0) {
    _internal_set_activation(from._internal_activation());
  }
  switch (from.value_case()) {
    case kLreluParams: {
      _internal_mutable_lrelu_params()->::smaug::LreluParams::MergeFrom(from._internal_lrelu_params());
      break;
    }
    case kEluParams: {
      _internal_mutable_elu_params()->::smaug::EluParams::MergeFrom(from._internal_elu_params());
      break;
    }
    case kHardTanhParams: {
      _internal_mutable_hard_tanh_params()->::smaug::HardTanhParams::MergeFrom(from._internal_hard_tanh_params());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void ActivationParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:smaug.ActivationParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivationParams::CopyFrom(const ActivationParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smaug.ActivationParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivationParams::IsInitialized() const {
  return true;
}

void ActivationParams::InternalSwap(ActivationParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(activation_, other->activation_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivationParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Params::InitAsDefaultInstance() {
  ::smaug::_Params_default_instance_.conv_params_ = const_cast< ::smaug::ConvParams*>(
      ::smaug::ConvParams::internal_default_instance());
  ::smaug::_Params_default_instance_.pool_params_ = const_cast< ::smaug::PoolParams*>(
      ::smaug::PoolParams::internal_default_instance());
  ::smaug::_Params_default_instance_.concat_params_ = const_cast< ::smaug::ConcatParams*>(
      ::smaug::ConcatParams::internal_default_instance());
  ::smaug::_Params_default_instance_.split_params_ = const_cast< ::smaug::SplitParams*>(
      ::smaug::SplitParams::internal_default_instance());
  ::smaug::_Params_default_instance_.padding_params_ = const_cast< ::smaug::PaddingParams*>(
      ::smaug::PaddingParams::internal_default_instance());
  ::smaug::_Params_default_instance_._instance.get_mutable()->act_params_ = const_cast< ::smaug::ActivationParams*>(
      ::smaug::ActivationParams::internal_default_instance());
}
class Params::_Internal {
 public:
  static const ::smaug::ConvParams& conv_params(const Params* msg);
  static const ::smaug::PoolParams& pool_params(const Params* msg);
  static const ::smaug::ConcatParams& concat_params(const Params* msg);
  static const ::smaug::SplitParams& split_params(const Params* msg);
  static const ::smaug::PaddingParams& padding_params(const Params* msg);
  static const ::smaug::ActivationParams& act_params(const Params* msg);
};

const ::smaug::ConvParams&
Params::_Internal::conv_params(const Params* msg) {
  return *msg->value_.conv_params_;
}
const ::smaug::PoolParams&
Params::_Internal::pool_params(const Params* msg) {
  return *msg->value_.pool_params_;
}
const ::smaug::ConcatParams&
Params::_Internal::concat_params(const Params* msg) {
  return *msg->value_.concat_params_;
}
const ::smaug::SplitParams&
Params::_Internal::split_params(const Params* msg) {
  return *msg->value_.split_params_;
}
const ::smaug::PaddingParams&
Params::_Internal::padding_params(const Params* msg) {
  return *msg->value_.padding_params_;
}
const ::smaug::ActivationParams&
Params::_Internal::act_params(const Params* msg) {
  return *msg->act_params_;
}
void Params::set_allocated_conv_params(::smaug::ConvParams* conv_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (conv_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      conv_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conv_params, submessage_arena);
    }
    set_has_conv_params();
    value_.conv_params_ = conv_params;
  }
  // @@protoc_insertion_point(field_set_allocated:smaug.Params.conv_params)
}
void Params::set_allocated_pool_params(::smaug::PoolParams* pool_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (pool_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pool_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pool_params, submessage_arena);
    }
    set_has_pool_params();
    value_.pool_params_ = pool_params;
  }
  // @@protoc_insertion_point(field_set_allocated:smaug.Params.pool_params)
}
void Params::set_allocated_concat_params(::smaug::ConcatParams* concat_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (concat_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      concat_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, concat_params, submessage_arena);
    }
    set_has_concat_params();
    value_.concat_params_ = concat_params;
  }
  // @@protoc_insertion_point(field_set_allocated:smaug.Params.concat_params)
}
void Params::set_allocated_split_params(::smaug::SplitParams* split_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (split_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      split_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, split_params, submessage_arena);
    }
    set_has_split_params();
    value_.split_params_ = split_params;
  }
  // @@protoc_insertion_point(field_set_allocated:smaug.Params.split_params)
}
void Params::set_allocated_padding_params(::smaug::PaddingParams* padding_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (padding_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      padding_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, padding_params, submessage_arena);
    }
    set_has_padding_params();
    value_.padding_params_ = padding_params;
  }
  // @@protoc_insertion_point(field_set_allocated:smaug.Params.padding_params)
}
Params::Params()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:smaug.Params)
}
Params::Params(const Params& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_act_params()) {
    act_params_ = new ::smaug::ActivationParams(*from.act_params_);
  } else {
    act_params_ = nullptr;
  }
  clear_has_value();
  switch (from.value_case()) {
    case kConvParams: {
      _internal_mutable_conv_params()->::smaug::ConvParams::MergeFrom(from._internal_conv_params());
      break;
    }
    case kPoolParams: {
      _internal_mutable_pool_params()->::smaug::PoolParams::MergeFrom(from._internal_pool_params());
      break;
    }
    case kConcatParams: {
      _internal_mutable_concat_params()->::smaug::ConcatParams::MergeFrom(from._internal_concat_params());
      break;
    }
    case kSplitParams: {
      _internal_mutable_split_params()->::smaug::SplitParams::MergeFrom(from._internal_split_params());
      break;
    }
    case kPaddingParams: {
      _internal_mutable_padding_params()->::smaug::PaddingParams::MergeFrom(from._internal_padding_params());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:smaug.Params)
}

void Params::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Params_smaug_2fcore_2fnode_2eproto.base);
  act_params_ = nullptr;
  clear_has_value();
}

Params::~Params() {
  // @@protoc_insertion_point(destructor:smaug.Params)
  SharedDtor();
}

void Params::SharedDtor() {
  if (this != internal_default_instance()) delete act_params_;
  if (has_value()) {
    clear_value();
  }
}

void Params::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Params& Params::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Params_smaug_2fcore_2fnode_2eproto.base);
  return *internal_default_instance();
}


void Params::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:smaug.Params)
  switch (value_case()) {
    case kConvParams: {
      delete value_.conv_params_;
      break;
    }
    case kPoolParams: {
      delete value_.pool_params_;
      break;
    }
    case kConcatParams: {
      delete value_.concat_params_;
      break;
    }
    case kSplitParams: {
      delete value_.split_params_;
      break;
    }
    case kPaddingParams: {
      delete value_.padding_params_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Params::Clear() {
// @@protoc_insertion_point(message_clear_start:smaug.Params)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && act_params_ != nullptr) {
    delete act_params_;
  }
  act_params_ = nullptr;
  clear_value();
  _internal_metadata_.Clear();
}

const char* Params::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .smaug.ConvParams conv_params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_conv_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .smaug.PoolParams pool_params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pool_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .smaug.ActivationParams act_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_act_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .smaug.ConcatParams concat_params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_concat_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .smaug.SplitParams split_params = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_split_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .smaug.PaddingParams padding_params = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_padding_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Params::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:smaug.Params)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .smaug.ConvParams conv_params = 1;
  if (_internal_has_conv_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::conv_params(this), target, stream);
  }

  // .smaug.PoolParams pool_params = 2;
  if (_internal_has_pool_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pool_params(this), target, stream);
  }

  // .smaug.ActivationParams act_params = 3;
  if (this->has_act_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::act_params(this), target, stream);
  }

  // .smaug.ConcatParams concat_params = 4;
  if (_internal_has_concat_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::concat_params(this), target, stream);
  }

  // .smaug.SplitParams split_params = 5;
  if (_internal_has_split_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::split_params(this), target, stream);
  }

  // .smaug.PaddingParams padding_params = 6;
  if (_internal_has_padding_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::padding_params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smaug.Params)
  return target;
}

size_t Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:smaug.Params)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .smaug.ActivationParams act_params = 3;
  if (this->has_act_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *act_params_);
  }

  switch (value_case()) {
    // .smaug.ConvParams conv_params = 1;
    case kConvParams: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.conv_params_);
      break;
    }
    // .smaug.PoolParams pool_params = 2;
    case kPoolParams: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.pool_params_);
      break;
    }
    // .smaug.ConcatParams concat_params = 4;
    case kConcatParams: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.concat_params_);
      break;
    }
    // .smaug.SplitParams split_params = 5;
    case kSplitParams: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.split_params_);
      break;
    }
    // .smaug.PaddingParams padding_params = 6;
    case kPaddingParams: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.padding_params_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Params::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:smaug.Params)
  GOOGLE_DCHECK_NE(&from, this);
  const Params* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Params>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:smaug.Params)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:smaug.Params)
    MergeFrom(*source);
  }
}

void Params::MergeFrom(const Params& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:smaug.Params)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_act_params()) {
    _internal_mutable_act_params()->::smaug::ActivationParams::MergeFrom(from._internal_act_params());
  }
  switch (from.value_case()) {
    case kConvParams: {
      _internal_mutable_conv_params()->::smaug::ConvParams::MergeFrom(from._internal_conv_params());
      break;
    }
    case kPoolParams: {
      _internal_mutable_pool_params()->::smaug::PoolParams::MergeFrom(from._internal_pool_params());
      break;
    }
    case kConcatParams: {
      _internal_mutable_concat_params()->::smaug::ConcatParams::MergeFrom(from._internal_concat_params());
      break;
    }
    case kSplitParams: {
      _internal_mutable_split_params()->::smaug::SplitParams::MergeFrom(from._internal_split_params());
      break;
    }
    case kPaddingParams: {
      _internal_mutable_padding_params()->::smaug::PaddingParams::MergeFrom(from._internal_padding_params());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void Params::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:smaug.Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Params::CopyFrom(const Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smaug.Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Params::IsInitialized() const {
  return true;
}

void Params::InternalSwap(Params* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(act_params_, other->act_params_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Params::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NodeProto::InitAsDefaultInstance() {
  ::smaug::_NodeProto_default_instance_._instance.get_mutable()->params_ = const_cast< ::smaug::Params*>(
      ::smaug::Params::internal_default_instance());
}
class NodeProto::_Internal {
 public:
  static const ::smaug::Params& params(const NodeProto* msg);
};

const ::smaug::Params&
NodeProto::_Internal::params(const NodeProto* msg) {
  return *msg->params_;
}
void NodeProto::clear_input_tensors() {
  input_tensors_.Clear();
}
void NodeProto::clear_output_tensors() {
  output_tensors_.Clear();
}
NodeProto::NodeProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:smaug.NodeProto)
}
NodeProto::NodeProto(const NodeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      parents_(from.parents_),
      src_tensors_indices_(from.src_tensors_indices_),
      input_tensors_(from.input_tensors_),
      output_tensors_(from.output_tensors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_params()) {
    params_ = new ::smaug::Params(*from.params_);
  } else {
    params_ = nullptr;
  }
  op_ = from.op_;
  // @@protoc_insertion_point(copy_constructor:smaug.NodeProto)
}

void NodeProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeProto_smaug_2fcore_2fnode_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&params_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_) -
      reinterpret_cast<char*>(&params_)) + sizeof(op_));
}

NodeProto::~NodeProto() {
  // @@protoc_insertion_point(destructor:smaug.NodeProto)
  SharedDtor();
}

void NodeProto::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete params_;
}

void NodeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeProto& NodeProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeProto_smaug_2fcore_2fnode_2eproto.base);
  return *internal_default_instance();
}


void NodeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:smaug.NodeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parents_.Clear();
  src_tensors_indices_.Clear();
  input_tensors_.Clear();
  output_tensors_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
  op_ = 0;
  _internal_metadata_.Clear();
}

const char* NodeProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "smaug.NodeProto.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .smaug.OpType op = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::smaug::OpType>(val));
        } else goto handle_unusual;
        continue;
      // repeated string parents = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_parents();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "smaug.NodeProto.parents"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 src_tensors_indices = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_src_tensors_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_src_tensors_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .smaug.TensorProto input_tensors = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_input_tensors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .smaug.TensorProto output_tensors = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_output_tensors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // .smaug.Params params = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:smaug.NodeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "smaug.NodeProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .smaug.OpType op = 2;
  if (this->op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_op(), target);
  }

  // repeated string parents = 3;
  for (int i = 0, n = this->_internal_parents_size(); i < n; i++) {
    const auto& s = this->_internal_parents(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "smaug.NodeProto.parents");
    target = stream->WriteString(3, s, target);
  }

  // repeated int32 src_tensors_indices = 5;
  {
    int byte_size = _src_tensors_indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_src_tensors_indices(), byte_size, target);
    }
  }

  // repeated .smaug.TensorProto input_tensors = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_input_tensors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_input_tensors(i), target, stream);
  }

  // repeated .smaug.TensorProto output_tensors = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_output_tensors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_output_tensors(i), target, stream);
  }

  // .smaug.Params params = 8;
  if (this->has_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smaug.NodeProto)
  return target;
}

size_t NodeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:smaug.NodeProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string parents = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(parents_.size());
  for (int i = 0, n = parents_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      parents_.Get(i));
  }

  // repeated int32 src_tensors_indices = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->src_tensors_indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _src_tensors_indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .smaug.TensorProto input_tensors = 6;
  total_size += 1UL * this->_internal_input_tensors_size();
  for (const auto& msg : this->input_tensors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .smaug.TensorProto output_tensors = 7;
  total_size += 1UL * this->_internal_output_tensors_size();
  for (const auto& msg : this->output_tensors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .smaug.Params params = 8;
  if (this->has_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *params_);
  }

  // .smaug.OpType op = 2;
  if (this->op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:smaug.NodeProto)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:smaug.NodeProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:smaug.NodeProto)
    MergeFrom(*source);
  }
}

void NodeProto::MergeFrom(const NodeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:smaug.NodeProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parents_.MergeFrom(from.parents_);
  src_tensors_indices_.MergeFrom(from.src_tensors_indices_);
  input_tensors_.MergeFrom(from.input_tensors_);
  output_tensors_.MergeFrom(from.output_tensors_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_params()) {
    _internal_mutable_params()->::smaug::Params::MergeFrom(from._internal_params());
  }
  if (from.op() != 0) {
    _internal_set_op(from._internal_op());
  }
}

void NodeProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:smaug.NodeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeProto::CopyFrom(const NodeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smaug.NodeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeProto::IsInitialized() const {
  return true;
}

void NodeProto::InternalSwap(NodeProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  parents_.InternalSwap(&other->parents_);
  src_tensors_indices_.InternalSwap(&other->src_tensors_indices_);
  input_tensors_.InternalSwap(&other->input_tensors_);
  output_tensors_.InternalSwap(&other->output_tensors_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(params_, other->params_);
  swap(op_, other->op_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace smaug
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::smaug::ConvParams* Arena::CreateMaybeMessage< ::smaug::ConvParams >(Arena* arena) {
  return Arena::CreateInternal< ::smaug::ConvParams >(arena);
}
template<> PROTOBUF_NOINLINE ::smaug::PoolParams* Arena::CreateMaybeMessage< ::smaug::PoolParams >(Arena* arena) {
  return Arena::CreateInternal< ::smaug::PoolParams >(arena);
}
template<> PROTOBUF_NOINLINE ::smaug::PaddingParams* Arena::CreateMaybeMessage< ::smaug::PaddingParams >(Arena* arena) {
  return Arena::CreateInternal< ::smaug::PaddingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::smaug::ConcatParams* Arena::CreateMaybeMessage< ::smaug::ConcatParams >(Arena* arena) {
  return Arena::CreateInternal< ::smaug::ConcatParams >(arena);
}
template<> PROTOBUF_NOINLINE ::smaug::SplitParams* Arena::CreateMaybeMessage< ::smaug::SplitParams >(Arena* arena) {
  return Arena::CreateInternal< ::smaug::SplitParams >(arena);
}
template<> PROTOBUF_NOINLINE ::smaug::LreluParams* Arena::CreateMaybeMessage< ::smaug::LreluParams >(Arena* arena) {
  return Arena::CreateInternal< ::smaug::LreluParams >(arena);
}
template<> PROTOBUF_NOINLINE ::smaug::EluParams* Arena::CreateMaybeMessage< ::smaug::EluParams >(Arena* arena) {
  return Arena::CreateInternal< ::smaug::EluParams >(arena);
}
template<> PROTOBUF_NOINLINE ::smaug::HardTanhParams* Arena::CreateMaybeMessage< ::smaug::HardTanhParams >(Arena* arena) {
  return Arena::CreateInternal< ::smaug::HardTanhParams >(arena);
}
template<> PROTOBUF_NOINLINE ::smaug::ActivationParams* Arena::CreateMaybeMessage< ::smaug::ActivationParams >(Arena* arena) {
  return Arena::CreateInternal< ::smaug::ActivationParams >(arena);
}
template<> PROTOBUF_NOINLINE ::smaug::Params* Arena::CreateMaybeMessage< ::smaug::Params >(Arena* arena) {
  return Arena::CreateInternal< ::smaug::Params >(arena);
}
template<> PROTOBUF_NOINLINE ::smaug::NodeProto* Arena::CreateMaybeMessage< ::smaug::NodeProto >(Arena* arena) {
  return Arena::CreateInternal< ::smaug::NodeProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
