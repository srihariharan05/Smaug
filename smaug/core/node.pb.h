// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: smaug/core/node.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_smaug_2fcore_2fnode_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_smaug_2fcore_2fnode_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "smaug/core/tensor.pb.h"
#include "smaug/core/types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_smaug_2fcore_2fnode_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_smaug_2fcore_2fnode_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_smaug_2fcore_2fnode_2eproto;
namespace smaug {
class ActivationParams;
class ActivationParamsDefaultTypeInternal;
extern ActivationParamsDefaultTypeInternal _ActivationParams_default_instance_;
class ConcatParams;
class ConcatParamsDefaultTypeInternal;
extern ConcatParamsDefaultTypeInternal _ConcatParams_default_instance_;
class ConvParams;
class ConvParamsDefaultTypeInternal;
extern ConvParamsDefaultTypeInternal _ConvParams_default_instance_;
class EluParams;
class EluParamsDefaultTypeInternal;
extern EluParamsDefaultTypeInternal _EluParams_default_instance_;
class HardTanhParams;
class HardTanhParamsDefaultTypeInternal;
extern HardTanhParamsDefaultTypeInternal _HardTanhParams_default_instance_;
class LreluParams;
class LreluParamsDefaultTypeInternal;
extern LreluParamsDefaultTypeInternal _LreluParams_default_instance_;
class NodeProto;
class NodeProtoDefaultTypeInternal;
extern NodeProtoDefaultTypeInternal _NodeProto_default_instance_;
class PaddingParams;
class PaddingParamsDefaultTypeInternal;
extern PaddingParamsDefaultTypeInternal _PaddingParams_default_instance_;
class Params;
class ParamsDefaultTypeInternal;
extern ParamsDefaultTypeInternal _Params_default_instance_;
class PoolParams;
class PoolParamsDefaultTypeInternal;
extern PoolParamsDefaultTypeInternal _PoolParams_default_instance_;
class SplitParams;
class SplitParamsDefaultTypeInternal;
extern SplitParamsDefaultTypeInternal _SplitParams_default_instance_;
}  // namespace smaug
PROTOBUF_NAMESPACE_OPEN
template<> ::smaug::ActivationParams* Arena::CreateMaybeMessage<::smaug::ActivationParams>(Arena*);
template<> ::smaug::ConcatParams* Arena::CreateMaybeMessage<::smaug::ConcatParams>(Arena*);
template<> ::smaug::ConvParams* Arena::CreateMaybeMessage<::smaug::ConvParams>(Arena*);
template<> ::smaug::EluParams* Arena::CreateMaybeMessage<::smaug::EluParams>(Arena*);
template<> ::smaug::HardTanhParams* Arena::CreateMaybeMessage<::smaug::HardTanhParams>(Arena*);
template<> ::smaug::LreluParams* Arena::CreateMaybeMessage<::smaug::LreluParams>(Arena*);
template<> ::smaug::NodeProto* Arena::CreateMaybeMessage<::smaug::NodeProto>(Arena*);
template<> ::smaug::PaddingParams* Arena::CreateMaybeMessage<::smaug::PaddingParams>(Arena*);
template<> ::smaug::Params* Arena::CreateMaybeMessage<::smaug::Params>(Arena*);
template<> ::smaug::PoolParams* Arena::CreateMaybeMessage<::smaug::PoolParams>(Arena*);
template<> ::smaug::SplitParams* Arena::CreateMaybeMessage<::smaug::SplitParams>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace smaug {

// ===================================================================

class ConvParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smaug.ConvParams) */ {
 public:
  ConvParams();
  virtual ~ConvParams();

  ConvParams(const ConvParams& from);
  ConvParams(ConvParams&& from) noexcept
    : ConvParams() {
    *this = ::std::move(from);
  }

  inline ConvParams& operator=(const ConvParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConvParams& operator=(ConvParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConvParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConvParams* internal_default_instance() {
    return reinterpret_cast<const ConvParams*>(
               &_ConvParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConvParams& a, ConvParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ConvParams* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConvParams* New() const final {
    return CreateMaybeMessage<ConvParams>(nullptr);
  }

  ConvParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConvParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConvParams& from);
  void MergeFrom(const ConvParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConvParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smaug.ConvParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_smaug_2fcore_2fnode_2eproto);
    return ::descriptor_table_smaug_2fcore_2fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrideFieldNumber = 2,
    kPaddingFieldNumber = 1,
  };
  // repeated int32 stride = 2;
  int stride_size() const;
  private:
  int _internal_stride_size() const;
  public:
  void clear_stride();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stride(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_stride() const;
  void _internal_add_stride(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_stride();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 stride(int index) const;
  void set_stride(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_stride(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      stride() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_stride();

  // .smaug.PaddingType padding = 1;
  void clear_padding();
  ::smaug::PaddingType padding() const;
  void set_padding(::smaug::PaddingType value);
  private:
  ::smaug::PaddingType _internal_padding() const;
  void _internal_set_padding(::smaug::PaddingType value);
  public:

  // @@protoc_insertion_point(class_scope:smaug.ConvParams)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > stride_;
  mutable std::atomic<int> _stride_cached_byte_size_;
  int padding_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_smaug_2fcore_2fnode_2eproto;
};
// -------------------------------------------------------------------

class PoolParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smaug.PoolParams) */ {
 public:
  PoolParams();
  virtual ~PoolParams();

  PoolParams(const PoolParams& from);
  PoolParams(PoolParams&& from) noexcept
    : PoolParams() {
    *this = ::std::move(from);
  }

  inline PoolParams& operator=(const PoolParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoolParams& operator=(PoolParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PoolParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PoolParams* internal_default_instance() {
    return reinterpret_cast<const PoolParams*>(
               &_PoolParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PoolParams& a, PoolParams& b) {
    a.Swap(&b);
  }
  inline void Swap(PoolParams* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PoolParams* New() const final {
    return CreateMaybeMessage<PoolParams>(nullptr);
  }

  PoolParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PoolParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PoolParams& from);
  void MergeFrom(const PoolParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoolParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smaug.PoolParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_smaug_2fcore_2fnode_2eproto);
    return ::descriptor_table_smaug_2fcore_2fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrideFieldNumber = 1,
    kPoolSizeFieldNumber = 2,
  };
  // repeated int32 stride = 1;
  int stride_size() const;
  private:
  int _internal_stride_size() const;
  public:
  void clear_stride();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stride(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_stride() const;
  void _internal_add_stride(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_stride();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 stride(int index) const;
  void set_stride(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_stride(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      stride() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_stride();

  // repeated int32 pool_size = 2;
  int pool_size_size() const;
  private:
  int _internal_pool_size_size() const;
  public:
  void clear_pool_size();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pool_size(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_pool_size() const;
  void _internal_add_pool_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_pool_size();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 pool_size(int index) const;
  void set_pool_size(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_pool_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      pool_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_pool_size();

  // @@protoc_insertion_point(class_scope:smaug.PoolParams)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > stride_;
  mutable std::atomic<int> _stride_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > pool_size_;
  mutable std::atomic<int> _pool_size_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_smaug_2fcore_2fnode_2eproto;
};
// -------------------------------------------------------------------

class PaddingParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smaug.PaddingParams) */ {
 public:
  PaddingParams();
  virtual ~PaddingParams();

  PaddingParams(const PaddingParams& from);
  PaddingParams(PaddingParams&& from) noexcept
    : PaddingParams() {
    *this = ::std::move(from);
  }

  inline PaddingParams& operator=(const PaddingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaddingParams& operator=(PaddingParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PaddingParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PaddingParams* internal_default_instance() {
    return reinterpret_cast<const PaddingParams*>(
               &_PaddingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PaddingParams& a, PaddingParams& b) {
    a.Swap(&b);
  }
  inline void Swap(PaddingParams* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PaddingParams* New() const final {
    return CreateMaybeMessage<PaddingParams>(nullptr);
  }

  PaddingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaddingParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PaddingParams& from);
  void MergeFrom(const PaddingParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaddingParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smaug.PaddingParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_smaug_2fcore_2fnode_2eproto);
    return ::descriptor_table_smaug_2fcore_2fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaddingSizeFieldNumber = 1,
  };
  // repeated int32 padding_size = 1;
  int padding_size_size() const;
  private:
  int _internal_padding_size_size() const;
  public:
  void clear_padding_size();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_padding_size(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_padding_size() const;
  void _internal_add_padding_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_padding_size();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 padding_size(int index) const;
  void set_padding_size(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_padding_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      padding_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_padding_size();

  // @@protoc_insertion_point(class_scope:smaug.PaddingParams)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > padding_size_;
  mutable std::atomic<int> _padding_size_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_smaug_2fcore_2fnode_2eproto;
};
// -------------------------------------------------------------------

class ConcatParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smaug.ConcatParams) */ {
 public:
  ConcatParams();
  virtual ~ConcatParams();

  ConcatParams(const ConcatParams& from);
  ConcatParams(ConcatParams&& from) noexcept
    : ConcatParams() {
    *this = ::std::move(from);
  }

  inline ConcatParams& operator=(const ConcatParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConcatParams& operator=(ConcatParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConcatParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConcatParams* internal_default_instance() {
    return reinterpret_cast<const ConcatParams*>(
               &_ConcatParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ConcatParams& a, ConcatParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ConcatParams* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConcatParams* New() const final {
    return CreateMaybeMessage<ConcatParams>(nullptr);
  }

  ConcatParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConcatParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConcatParams& from);
  void MergeFrom(const ConcatParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConcatParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smaug.ConcatParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_smaug_2fcore_2fnode_2eproto);
    return ::descriptor_table_smaug_2fcore_2fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConcatAxisFieldNumber = 1,
  };
  // int32 concat_axis = 1;
  void clear_concat_axis();
  ::PROTOBUF_NAMESPACE_ID::int32 concat_axis() const;
  void set_concat_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_concat_axis() const;
  void _internal_set_concat_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smaug.ConcatParams)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 concat_axis_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_smaug_2fcore_2fnode_2eproto;
};
// -------------------------------------------------------------------

class SplitParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smaug.SplitParams) */ {
 public:
  SplitParams();
  virtual ~SplitParams();

  SplitParams(const SplitParams& from);
  SplitParams(SplitParams&& from) noexcept
    : SplitParams() {
    *this = ::std::move(from);
  }

  inline SplitParams& operator=(const SplitParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SplitParams& operator=(SplitParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SplitParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SplitParams* internal_default_instance() {
    return reinterpret_cast<const SplitParams*>(
               &_SplitParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SplitParams& a, SplitParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SplitParams* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SplitParams* New() const final {
    return CreateMaybeMessage<SplitParams>(nullptr);
  }

  SplitParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SplitParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SplitParams& from);
  void MergeFrom(const SplitParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SplitParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smaug.SplitParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_smaug_2fcore_2fnode_2eproto);
    return ::descriptor_table_smaug_2fcore_2fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSplitAxisFieldNumber = 1,
  };
  // int32 split_axis = 1;
  void clear_split_axis();
  ::PROTOBUF_NAMESPACE_ID::int32 split_axis() const;
  void set_split_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_split_axis() const;
  void _internal_set_split_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smaug.SplitParams)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 split_axis_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_smaug_2fcore_2fnode_2eproto;
};
// -------------------------------------------------------------------

class LreluParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smaug.LreluParams) */ {
 public:
  LreluParams();
  virtual ~LreluParams();

  LreluParams(const LreluParams& from);
  LreluParams(LreluParams&& from) noexcept
    : LreluParams() {
    *this = ::std::move(from);
  }

  inline LreluParams& operator=(const LreluParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline LreluParams& operator=(LreluParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LreluParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LreluParams* internal_default_instance() {
    return reinterpret_cast<const LreluParams*>(
               &_LreluParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LreluParams& a, LreluParams& b) {
    a.Swap(&b);
  }
  inline void Swap(LreluParams* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LreluParams* New() const final {
    return CreateMaybeMessage<LreluParams>(nullptr);
  }

  LreluParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LreluParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LreluParams& from);
  void MergeFrom(const LreluParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LreluParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smaug.LreluParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_smaug_2fcore_2fnode_2eproto);
    return ::descriptor_table_smaug_2fcore_2fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlopeFieldNumber = 1,
  };
  // float slope = 1;
  void clear_slope();
  float slope() const;
  void set_slope(float value);
  private:
  float _internal_slope() const;
  void _internal_set_slope(float value);
  public:

  // @@protoc_insertion_point(class_scope:smaug.LreluParams)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float slope_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_smaug_2fcore_2fnode_2eproto;
};
// -------------------------------------------------------------------

class EluParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smaug.EluParams) */ {
 public:
  EluParams();
  virtual ~EluParams();

  EluParams(const EluParams& from);
  EluParams(EluParams&& from) noexcept
    : EluParams() {
    *this = ::std::move(from);
  }

  inline EluParams& operator=(const EluParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EluParams& operator=(EluParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EluParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EluParams* internal_default_instance() {
    return reinterpret_cast<const EluParams*>(
               &_EluParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(EluParams& a, EluParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EluParams* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EluParams* New() const final {
    return CreateMaybeMessage<EluParams>(nullptr);
  }

  EluParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EluParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EluParams& from);
  void MergeFrom(const EluParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EluParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smaug.EluParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_smaug_2fcore_2fnode_2eproto);
    return ::descriptor_table_smaug_2fcore_2fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlphaFieldNumber = 1,
    kLambdaParamFieldNumber = 2,
  };
  // float alpha = 1;
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // float lambda_param = 2;
  void clear_lambda_param();
  float lambda_param() const;
  void set_lambda_param(float value);
  private:
  float _internal_lambda_param() const;
  void _internal_set_lambda_param(float value);
  public:

  // @@protoc_insertion_point(class_scope:smaug.EluParams)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float alpha_;
  float lambda_param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_smaug_2fcore_2fnode_2eproto;
};
// -------------------------------------------------------------------

class HardTanhParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smaug.HardTanhParams) */ {
 public:
  HardTanhParams();
  virtual ~HardTanhParams();

  HardTanhParams(const HardTanhParams& from);
  HardTanhParams(HardTanhParams&& from) noexcept
    : HardTanhParams() {
    *this = ::std::move(from);
  }

  inline HardTanhParams& operator=(const HardTanhParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline HardTanhParams& operator=(HardTanhParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HardTanhParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HardTanhParams* internal_default_instance() {
    return reinterpret_cast<const HardTanhParams*>(
               &_HardTanhParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(HardTanhParams& a, HardTanhParams& b) {
    a.Swap(&b);
  }
  inline void Swap(HardTanhParams* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HardTanhParams* New() const final {
    return CreateMaybeMessage<HardTanhParams>(nullptr);
  }

  HardTanhParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HardTanhParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HardTanhParams& from);
  void MergeFrom(const HardTanhParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HardTanhParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smaug.HardTanhParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_smaug_2fcore_2fnode_2eproto);
    return ::descriptor_table_smaug_2fcore_2fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinFieldNumber = 1,
    kMaxFieldNumber = 2,
  };
  // float min = 1;
  void clear_min();
  float min() const;
  void set_min(float value);
  private:
  float _internal_min() const;
  void _internal_set_min(float value);
  public:

  // float max = 2;
  void clear_max();
  float max() const;
  void set_max(float value);
  private:
  float _internal_max() const;
  void _internal_set_max(float value);
  public:

  // @@protoc_insertion_point(class_scope:smaug.HardTanhParams)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float min_;
  float max_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_smaug_2fcore_2fnode_2eproto;
};
// -------------------------------------------------------------------

class ActivationParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smaug.ActivationParams) */ {
 public:
  ActivationParams();
  virtual ~ActivationParams();

  ActivationParams(const ActivationParams& from);
  ActivationParams(ActivationParams&& from) noexcept
    : ActivationParams() {
    *this = ::std::move(from);
  }

  inline ActivationParams& operator=(const ActivationParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivationParams& operator=(ActivationParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActivationParams& default_instance();

  enum ValueCase {
    kLreluParams = 2,
    kEluParams = 3,
    kHardTanhParams = 4,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActivationParams* internal_default_instance() {
    return reinterpret_cast<const ActivationParams*>(
               &_ActivationParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ActivationParams& a, ActivationParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivationParams* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivationParams* New() const final {
    return CreateMaybeMessage<ActivationParams>(nullptr);
  }

  ActivationParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivationParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActivationParams& from);
  void MergeFrom(const ActivationParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActivationParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smaug.ActivationParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_smaug_2fcore_2fnode_2eproto);
    return ::descriptor_table_smaug_2fcore_2fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActivationFieldNumber = 1,
    kLreluParamsFieldNumber = 2,
    kEluParamsFieldNumber = 3,
    kHardTanhParamsFieldNumber = 4,
  };
  // .smaug.OpType activation = 1;
  void clear_activation();
  ::smaug::OpType activation() const;
  void set_activation(::smaug::OpType value);
  private:
  ::smaug::OpType _internal_activation() const;
  void _internal_set_activation(::smaug::OpType value);
  public:

  // .smaug.LreluParams lrelu_params = 2;
  bool has_lrelu_params() const;
  private:
  bool _internal_has_lrelu_params() const;
  public:
  void clear_lrelu_params();
  const ::smaug::LreluParams& lrelu_params() const;
  ::smaug::LreluParams* release_lrelu_params();
  ::smaug::LreluParams* mutable_lrelu_params();
  void set_allocated_lrelu_params(::smaug::LreluParams* lrelu_params);
  private:
  const ::smaug::LreluParams& _internal_lrelu_params() const;
  ::smaug::LreluParams* _internal_mutable_lrelu_params();
  public:

  // .smaug.EluParams elu_params = 3;
  bool has_elu_params() const;
  private:
  bool _internal_has_elu_params() const;
  public:
  void clear_elu_params();
  const ::smaug::EluParams& elu_params() const;
  ::smaug::EluParams* release_elu_params();
  ::smaug::EluParams* mutable_elu_params();
  void set_allocated_elu_params(::smaug::EluParams* elu_params);
  private:
  const ::smaug::EluParams& _internal_elu_params() const;
  ::smaug::EluParams* _internal_mutable_elu_params();
  public:

  // .smaug.HardTanhParams hard_tanh_params = 4;
  bool has_hard_tanh_params() const;
  private:
  bool _internal_has_hard_tanh_params() const;
  public:
  void clear_hard_tanh_params();
  const ::smaug::HardTanhParams& hard_tanh_params() const;
  ::smaug::HardTanhParams* release_hard_tanh_params();
  ::smaug::HardTanhParams* mutable_hard_tanh_params();
  void set_allocated_hard_tanh_params(::smaug::HardTanhParams* hard_tanh_params);
  private:
  const ::smaug::HardTanhParams& _internal_hard_tanh_params() const;
  ::smaug::HardTanhParams* _internal_mutable_hard_tanh_params();
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:smaug.ActivationParams)
 private:
  class _Internal;
  void set_has_lrelu_params();
  void set_has_elu_params();
  void set_has_hard_tanh_params();

  inline bool has_value() const;
  inline void clear_has_value();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int activation_;
  union ValueUnion {
    ValueUnion() {}
    ::smaug::LreluParams* lrelu_params_;
    ::smaug::EluParams* elu_params_;
    ::smaug::HardTanhParams* hard_tanh_params_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_smaug_2fcore_2fnode_2eproto;
};
// -------------------------------------------------------------------

class Params :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smaug.Params) */ {
 public:
  Params();
  virtual ~Params();

  Params(const Params& from);
  Params(Params&& from) noexcept
    : Params() {
    *this = ::std::move(from);
  }

  inline Params& operator=(const Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline Params& operator=(Params&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Params& default_instance();

  enum ValueCase {
    kConvParams = 1,
    kPoolParams = 2,
    kConcatParams = 4,
    kSplitParams = 5,
    kPaddingParams = 6,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Params* internal_default_instance() {
    return reinterpret_cast<const Params*>(
               &_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Params& a, Params& b) {
    a.Swap(&b);
  }
  inline void Swap(Params* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Params* New() const final {
    return CreateMaybeMessage<Params>(nullptr);
  }

  Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Params>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Params& from);
  void MergeFrom(const Params& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Params* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smaug.Params";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_smaug_2fcore_2fnode_2eproto);
    return ::descriptor_table_smaug_2fcore_2fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActParamsFieldNumber = 3,
    kConvParamsFieldNumber = 1,
    kPoolParamsFieldNumber = 2,
    kConcatParamsFieldNumber = 4,
    kSplitParamsFieldNumber = 5,
    kPaddingParamsFieldNumber = 6,
  };
  // .smaug.ActivationParams act_params = 3;
  bool has_act_params() const;
  private:
  bool _internal_has_act_params() const;
  public:
  void clear_act_params();
  const ::smaug::ActivationParams& act_params() const;
  ::smaug::ActivationParams* release_act_params();
  ::smaug::ActivationParams* mutable_act_params();
  void set_allocated_act_params(::smaug::ActivationParams* act_params);
  private:
  const ::smaug::ActivationParams& _internal_act_params() const;
  ::smaug::ActivationParams* _internal_mutable_act_params();
  public:

  // .smaug.ConvParams conv_params = 1;
  bool has_conv_params() const;
  private:
  bool _internal_has_conv_params() const;
  public:
  void clear_conv_params();
  const ::smaug::ConvParams& conv_params() const;
  ::smaug::ConvParams* release_conv_params();
  ::smaug::ConvParams* mutable_conv_params();
  void set_allocated_conv_params(::smaug::ConvParams* conv_params);
  private:
  const ::smaug::ConvParams& _internal_conv_params() const;
  ::smaug::ConvParams* _internal_mutable_conv_params();
  public:

  // .smaug.PoolParams pool_params = 2;
  bool has_pool_params() const;
  private:
  bool _internal_has_pool_params() const;
  public:
  void clear_pool_params();
  const ::smaug::PoolParams& pool_params() const;
  ::smaug::PoolParams* release_pool_params();
  ::smaug::PoolParams* mutable_pool_params();
  void set_allocated_pool_params(::smaug::PoolParams* pool_params);
  private:
  const ::smaug::PoolParams& _internal_pool_params() const;
  ::smaug::PoolParams* _internal_mutable_pool_params();
  public:

  // .smaug.ConcatParams concat_params = 4;
  bool has_concat_params() const;
  private:
  bool _internal_has_concat_params() const;
  public:
  void clear_concat_params();
  const ::smaug::ConcatParams& concat_params() const;
  ::smaug::ConcatParams* release_concat_params();
  ::smaug::ConcatParams* mutable_concat_params();
  void set_allocated_concat_params(::smaug::ConcatParams* concat_params);
  private:
  const ::smaug::ConcatParams& _internal_concat_params() const;
  ::smaug::ConcatParams* _internal_mutable_concat_params();
  public:

  // .smaug.SplitParams split_params = 5;
  bool has_split_params() const;
  private:
  bool _internal_has_split_params() const;
  public:
  void clear_split_params();
  const ::smaug::SplitParams& split_params() const;
  ::smaug::SplitParams* release_split_params();
  ::smaug::SplitParams* mutable_split_params();
  void set_allocated_split_params(::smaug::SplitParams* split_params);
  private:
  const ::smaug::SplitParams& _internal_split_params() const;
  ::smaug::SplitParams* _internal_mutable_split_params();
  public:

  // .smaug.PaddingParams padding_params = 6;
  bool has_padding_params() const;
  private:
  bool _internal_has_padding_params() const;
  public:
  void clear_padding_params();
  const ::smaug::PaddingParams& padding_params() const;
  ::smaug::PaddingParams* release_padding_params();
  ::smaug::PaddingParams* mutable_padding_params();
  void set_allocated_padding_params(::smaug::PaddingParams* padding_params);
  private:
  const ::smaug::PaddingParams& _internal_padding_params() const;
  ::smaug::PaddingParams* _internal_mutable_padding_params();
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:smaug.Params)
 private:
  class _Internal;
  void set_has_conv_params();
  void set_has_pool_params();
  void set_has_concat_params();
  void set_has_split_params();
  void set_has_padding_params();

  inline bool has_value() const;
  inline void clear_has_value();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::smaug::ActivationParams* act_params_;
  union ValueUnion {
    ValueUnion() {}
    ::smaug::ConvParams* conv_params_;
    ::smaug::PoolParams* pool_params_;
    ::smaug::ConcatParams* concat_params_;
    ::smaug::SplitParams* split_params_;
    ::smaug::PaddingParams* padding_params_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_smaug_2fcore_2fnode_2eproto;
};
// -------------------------------------------------------------------

class NodeProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smaug.NodeProto) */ {
 public:
  NodeProto();
  virtual ~NodeProto();

  NodeProto(const NodeProto& from);
  NodeProto(NodeProto&& from) noexcept
    : NodeProto() {
    *this = ::std::move(from);
  }

  inline NodeProto& operator=(const NodeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeProto& operator=(NodeProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeProto* internal_default_instance() {
    return reinterpret_cast<const NodeProto*>(
               &_NodeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(NodeProto& a, NodeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeProto* New() const final {
    return CreateMaybeMessage<NodeProto>(nullptr);
  }

  NodeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeProto& from);
  void MergeFrom(const NodeProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smaug.NodeProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_smaug_2fcore_2fnode_2eproto);
    return ::descriptor_table_smaug_2fcore_2fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentsFieldNumber = 3,
    kSrcTensorsIndicesFieldNumber = 5,
    kInputTensorsFieldNumber = 6,
    kOutputTensorsFieldNumber = 7,
    kNameFieldNumber = 1,
    kParamsFieldNumber = 8,
    kOpFieldNumber = 2,
  };
  // repeated string parents = 3;
  int parents_size() const;
  private:
  int _internal_parents_size() const;
  public:
  void clear_parents();
  const std::string& parents(int index) const;
  std::string* mutable_parents(int index);
  void set_parents(int index, const std::string& value);
  void set_parents(int index, std::string&& value);
  void set_parents(int index, const char* value);
  void set_parents(int index, const char* value, size_t size);
  std::string* add_parents();
  void add_parents(const std::string& value);
  void add_parents(std::string&& value);
  void add_parents(const char* value);
  void add_parents(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& parents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_parents();
  private:
  const std::string& _internal_parents(int index) const;
  std::string* _internal_add_parents();
  public:

  // repeated int32 src_tensors_indices = 5;
  int src_tensors_indices_size() const;
  private:
  int _internal_src_tensors_indices_size() const;
  public:
  void clear_src_tensors_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_src_tensors_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_src_tensors_indices() const;
  void _internal_add_src_tensors_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_src_tensors_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 src_tensors_indices(int index) const;
  void set_src_tensors_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_src_tensors_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      src_tensors_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_src_tensors_indices();

  // repeated .smaug.TensorProto input_tensors = 6;
  int input_tensors_size() const;
  private:
  int _internal_input_tensors_size() const;
  public:
  void clear_input_tensors();
  ::smaug::TensorProto* mutable_input_tensors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smaug::TensorProto >*
      mutable_input_tensors();
  private:
  const ::smaug::TensorProto& _internal_input_tensors(int index) const;
  ::smaug::TensorProto* _internal_add_input_tensors();
  public:
  const ::smaug::TensorProto& input_tensors(int index) const;
  ::smaug::TensorProto* add_input_tensors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smaug::TensorProto >&
      input_tensors() const;

  // repeated .smaug.TensorProto output_tensors = 7;
  int output_tensors_size() const;
  private:
  int _internal_output_tensors_size() const;
  public:
  void clear_output_tensors();
  ::smaug::TensorProto* mutable_output_tensors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smaug::TensorProto >*
      mutable_output_tensors();
  private:
  const ::smaug::TensorProto& _internal_output_tensors(int index) const;
  ::smaug::TensorProto* _internal_add_output_tensors();
  public:
  const ::smaug::TensorProto& output_tensors(int index) const;
  ::smaug::TensorProto* add_output_tensors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smaug::TensorProto >&
      output_tensors() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .smaug.Params params = 8;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::smaug::Params& params() const;
  ::smaug::Params* release_params();
  ::smaug::Params* mutable_params();
  void set_allocated_params(::smaug::Params* params);
  private:
  const ::smaug::Params& _internal_params() const;
  ::smaug::Params* _internal_mutable_params();
  public:

  // .smaug.OpType op = 2;
  void clear_op();
  ::smaug::OpType op() const;
  void set_op(::smaug::OpType value);
  private:
  ::smaug::OpType _internal_op() const;
  void _internal_set_op(::smaug::OpType value);
  public:

  // @@protoc_insertion_point(class_scope:smaug.NodeProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> parents_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > src_tensors_indices_;
  mutable std::atomic<int> _src_tensors_indices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smaug::TensorProto > input_tensors_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smaug::TensorProto > output_tensors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::smaug::Params* params_;
  int op_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_smaug_2fcore_2fnode_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConvParams

// .smaug.PaddingType padding = 1;
inline void ConvParams::clear_padding() {
  padding_ = 0;
}
inline ::smaug::PaddingType ConvParams::_internal_padding() const {
  return static_cast< ::smaug::PaddingType >(padding_);
}
inline ::smaug::PaddingType ConvParams::padding() const {
  // @@protoc_insertion_point(field_get:smaug.ConvParams.padding)
  return _internal_padding();
}
inline void ConvParams::_internal_set_padding(::smaug::PaddingType value) {
  
  padding_ = value;
}
inline void ConvParams::set_padding(::smaug::PaddingType value) {
  _internal_set_padding(value);
  // @@protoc_insertion_point(field_set:smaug.ConvParams.padding)
}

// repeated int32 stride = 2;
inline int ConvParams::_internal_stride_size() const {
  return stride_.size();
}
inline int ConvParams::stride_size() const {
  return _internal_stride_size();
}
inline void ConvParams::clear_stride() {
  stride_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConvParams::_internal_stride(int index) const {
  return stride_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConvParams::stride(int index) const {
  // @@protoc_insertion_point(field_get:smaug.ConvParams.stride)
  return _internal_stride(index);
}
inline void ConvParams::set_stride(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:smaug.ConvParams.stride)
}
inline void ConvParams::_internal_add_stride(::PROTOBUF_NAMESPACE_ID::int32 value) {
  stride_.Add(value);
}
inline void ConvParams::add_stride(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_stride(value);
  // @@protoc_insertion_point(field_add:smaug.ConvParams.stride)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ConvParams::_internal_stride() const {
  return stride_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ConvParams::stride() const {
  // @@protoc_insertion_point(field_list:smaug.ConvParams.stride)
  return _internal_stride();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ConvParams::_internal_mutable_stride() {
  return &stride_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ConvParams::mutable_stride() {
  // @@protoc_insertion_point(field_mutable_list:smaug.ConvParams.stride)
  return _internal_mutable_stride();
}

// -------------------------------------------------------------------

// PoolParams

// repeated int32 stride = 1;
inline int PoolParams::_internal_stride_size() const {
  return stride_.size();
}
inline int PoolParams::stride_size() const {
  return _internal_stride_size();
}
inline void PoolParams::clear_stride() {
  stride_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoolParams::_internal_stride(int index) const {
  return stride_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoolParams::stride(int index) const {
  // @@protoc_insertion_point(field_get:smaug.PoolParams.stride)
  return _internal_stride(index);
}
inline void PoolParams::set_stride(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:smaug.PoolParams.stride)
}
inline void PoolParams::_internal_add_stride(::PROTOBUF_NAMESPACE_ID::int32 value) {
  stride_.Add(value);
}
inline void PoolParams::add_stride(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_stride(value);
  // @@protoc_insertion_point(field_add:smaug.PoolParams.stride)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PoolParams::_internal_stride() const {
  return stride_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PoolParams::stride() const {
  // @@protoc_insertion_point(field_list:smaug.PoolParams.stride)
  return _internal_stride();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PoolParams::_internal_mutable_stride() {
  return &stride_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PoolParams::mutable_stride() {
  // @@protoc_insertion_point(field_mutable_list:smaug.PoolParams.stride)
  return _internal_mutable_stride();
}

// repeated int32 pool_size = 2;
inline int PoolParams::_internal_pool_size_size() const {
  return pool_size_.size();
}
inline int PoolParams::pool_size_size() const {
  return _internal_pool_size_size();
}
inline void PoolParams::clear_pool_size() {
  pool_size_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoolParams::_internal_pool_size(int index) const {
  return pool_size_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoolParams::pool_size(int index) const {
  // @@protoc_insertion_point(field_get:smaug.PoolParams.pool_size)
  return _internal_pool_size(index);
}
inline void PoolParams::set_pool_size(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  pool_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:smaug.PoolParams.pool_size)
}
inline void PoolParams::_internal_add_pool_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  pool_size_.Add(value);
}
inline void PoolParams::add_pool_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_pool_size(value);
  // @@protoc_insertion_point(field_add:smaug.PoolParams.pool_size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PoolParams::_internal_pool_size() const {
  return pool_size_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PoolParams::pool_size() const {
  // @@protoc_insertion_point(field_list:smaug.PoolParams.pool_size)
  return _internal_pool_size();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PoolParams::_internal_mutable_pool_size() {
  return &pool_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PoolParams::mutable_pool_size() {
  // @@protoc_insertion_point(field_mutable_list:smaug.PoolParams.pool_size)
  return _internal_mutable_pool_size();
}

// -------------------------------------------------------------------

// PaddingParams

// repeated int32 padding_size = 1;
inline int PaddingParams::_internal_padding_size_size() const {
  return padding_size_.size();
}
inline int PaddingParams::padding_size_size() const {
  return _internal_padding_size_size();
}
inline void PaddingParams::clear_padding_size() {
  padding_size_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaddingParams::_internal_padding_size(int index) const {
  return padding_size_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaddingParams::padding_size(int index) const {
  // @@protoc_insertion_point(field_get:smaug.PaddingParams.padding_size)
  return _internal_padding_size(index);
}
inline void PaddingParams::set_padding_size(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  padding_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:smaug.PaddingParams.padding_size)
}
inline void PaddingParams::_internal_add_padding_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  padding_size_.Add(value);
}
inline void PaddingParams::add_padding_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_padding_size(value);
  // @@protoc_insertion_point(field_add:smaug.PaddingParams.padding_size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PaddingParams::_internal_padding_size() const {
  return padding_size_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PaddingParams::padding_size() const {
  // @@protoc_insertion_point(field_list:smaug.PaddingParams.padding_size)
  return _internal_padding_size();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PaddingParams::_internal_mutable_padding_size() {
  return &padding_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PaddingParams::mutable_padding_size() {
  // @@protoc_insertion_point(field_mutable_list:smaug.PaddingParams.padding_size)
  return _internal_mutable_padding_size();
}

// -------------------------------------------------------------------

// ConcatParams

// int32 concat_axis = 1;
inline void ConcatParams::clear_concat_axis() {
  concat_axis_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConcatParams::_internal_concat_axis() const {
  return concat_axis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConcatParams::concat_axis() const {
  // @@protoc_insertion_point(field_get:smaug.ConcatParams.concat_axis)
  return _internal_concat_axis();
}
inline void ConcatParams::_internal_set_concat_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  concat_axis_ = value;
}
inline void ConcatParams::set_concat_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_concat_axis(value);
  // @@protoc_insertion_point(field_set:smaug.ConcatParams.concat_axis)
}

// -------------------------------------------------------------------

// SplitParams

// int32 split_axis = 1;
inline void SplitParams::clear_split_axis() {
  split_axis_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SplitParams::_internal_split_axis() const {
  return split_axis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SplitParams::split_axis() const {
  // @@protoc_insertion_point(field_get:smaug.SplitParams.split_axis)
  return _internal_split_axis();
}
inline void SplitParams::_internal_set_split_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  split_axis_ = value;
}
inline void SplitParams::set_split_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_split_axis(value);
  // @@protoc_insertion_point(field_set:smaug.SplitParams.split_axis)
}

// -------------------------------------------------------------------

// LreluParams

// float slope = 1;
inline void LreluParams::clear_slope() {
  slope_ = 0;
}
inline float LreluParams::_internal_slope() const {
  return slope_;
}
inline float LreluParams::slope() const {
  // @@protoc_insertion_point(field_get:smaug.LreluParams.slope)
  return _internal_slope();
}
inline void LreluParams::_internal_set_slope(float value) {
  
  slope_ = value;
}
inline void LreluParams::set_slope(float value) {
  _internal_set_slope(value);
  // @@protoc_insertion_point(field_set:smaug.LreluParams.slope)
}

// -------------------------------------------------------------------

// EluParams

// float alpha = 1;
inline void EluParams::clear_alpha() {
  alpha_ = 0;
}
inline float EluParams::_internal_alpha() const {
  return alpha_;
}
inline float EluParams::alpha() const {
  // @@protoc_insertion_point(field_get:smaug.EluParams.alpha)
  return _internal_alpha();
}
inline void EluParams::_internal_set_alpha(float value) {
  
  alpha_ = value;
}
inline void EluParams::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:smaug.EluParams.alpha)
}

// float lambda_param = 2;
inline void EluParams::clear_lambda_param() {
  lambda_param_ = 0;
}
inline float EluParams::_internal_lambda_param() const {
  return lambda_param_;
}
inline float EluParams::lambda_param() const {
  // @@protoc_insertion_point(field_get:smaug.EluParams.lambda_param)
  return _internal_lambda_param();
}
inline void EluParams::_internal_set_lambda_param(float value) {
  
  lambda_param_ = value;
}
inline void EluParams::set_lambda_param(float value) {
  _internal_set_lambda_param(value);
  // @@protoc_insertion_point(field_set:smaug.EluParams.lambda_param)
}

// -------------------------------------------------------------------

// HardTanhParams

// float min = 1;
inline void HardTanhParams::clear_min() {
  min_ = 0;
}
inline float HardTanhParams::_internal_min() const {
  return min_;
}
inline float HardTanhParams::min() const {
  // @@protoc_insertion_point(field_get:smaug.HardTanhParams.min)
  return _internal_min();
}
inline void HardTanhParams::_internal_set_min(float value) {
  
  min_ = value;
}
inline void HardTanhParams::set_min(float value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:smaug.HardTanhParams.min)
}

// float max = 2;
inline void HardTanhParams::clear_max() {
  max_ = 0;
}
inline float HardTanhParams::_internal_max() const {
  return max_;
}
inline float HardTanhParams::max() const {
  // @@protoc_insertion_point(field_get:smaug.HardTanhParams.max)
  return _internal_max();
}
inline void HardTanhParams::_internal_set_max(float value) {
  
  max_ = value;
}
inline void HardTanhParams::set_max(float value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:smaug.HardTanhParams.max)
}

// -------------------------------------------------------------------

// ActivationParams

// .smaug.OpType activation = 1;
inline void ActivationParams::clear_activation() {
  activation_ = 0;
}
inline ::smaug::OpType ActivationParams::_internal_activation() const {
  return static_cast< ::smaug::OpType >(activation_);
}
inline ::smaug::OpType ActivationParams::activation() const {
  // @@protoc_insertion_point(field_get:smaug.ActivationParams.activation)
  return _internal_activation();
}
inline void ActivationParams::_internal_set_activation(::smaug::OpType value) {
  
  activation_ = value;
}
inline void ActivationParams::set_activation(::smaug::OpType value) {
  _internal_set_activation(value);
  // @@protoc_insertion_point(field_set:smaug.ActivationParams.activation)
}

// .smaug.LreluParams lrelu_params = 2;
inline bool ActivationParams::_internal_has_lrelu_params() const {
  return value_case() == kLreluParams;
}
inline bool ActivationParams::has_lrelu_params() const {
  return _internal_has_lrelu_params();
}
inline void ActivationParams::set_has_lrelu_params() {
  _oneof_case_[0] = kLreluParams;
}
inline void ActivationParams::clear_lrelu_params() {
  if (_internal_has_lrelu_params()) {
    delete value_.lrelu_params_;
    clear_has_value();
  }
}
inline ::smaug::LreluParams* ActivationParams::release_lrelu_params() {
  // @@protoc_insertion_point(field_release:smaug.ActivationParams.lrelu_params)
  if (_internal_has_lrelu_params()) {
    clear_has_value();
      ::smaug::LreluParams* temp = value_.lrelu_params_;
    value_.lrelu_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::smaug::LreluParams& ActivationParams::_internal_lrelu_params() const {
  return _internal_has_lrelu_params()
      ? *value_.lrelu_params_
      : *reinterpret_cast< ::smaug::LreluParams*>(&::smaug::_LreluParams_default_instance_);
}
inline const ::smaug::LreluParams& ActivationParams::lrelu_params() const {
  // @@protoc_insertion_point(field_get:smaug.ActivationParams.lrelu_params)
  return _internal_lrelu_params();
}
inline ::smaug::LreluParams* ActivationParams::_internal_mutable_lrelu_params() {
  if (!_internal_has_lrelu_params()) {
    clear_value();
    set_has_lrelu_params();
    value_.lrelu_params_ = CreateMaybeMessage< ::smaug::LreluParams >(
        GetArenaNoVirtual());
  }
  return value_.lrelu_params_;
}
inline ::smaug::LreluParams* ActivationParams::mutable_lrelu_params() {
  // @@protoc_insertion_point(field_mutable:smaug.ActivationParams.lrelu_params)
  return _internal_mutable_lrelu_params();
}

// .smaug.EluParams elu_params = 3;
inline bool ActivationParams::_internal_has_elu_params() const {
  return value_case() == kEluParams;
}
inline bool ActivationParams::has_elu_params() const {
  return _internal_has_elu_params();
}
inline void ActivationParams::set_has_elu_params() {
  _oneof_case_[0] = kEluParams;
}
inline void ActivationParams::clear_elu_params() {
  if (_internal_has_elu_params()) {
    delete value_.elu_params_;
    clear_has_value();
  }
}
inline ::smaug::EluParams* ActivationParams::release_elu_params() {
  // @@protoc_insertion_point(field_release:smaug.ActivationParams.elu_params)
  if (_internal_has_elu_params()) {
    clear_has_value();
      ::smaug::EluParams* temp = value_.elu_params_;
    value_.elu_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::smaug::EluParams& ActivationParams::_internal_elu_params() const {
  return _internal_has_elu_params()
      ? *value_.elu_params_
      : *reinterpret_cast< ::smaug::EluParams*>(&::smaug::_EluParams_default_instance_);
}
inline const ::smaug::EluParams& ActivationParams::elu_params() const {
  // @@protoc_insertion_point(field_get:smaug.ActivationParams.elu_params)
  return _internal_elu_params();
}
inline ::smaug::EluParams* ActivationParams::_internal_mutable_elu_params() {
  if (!_internal_has_elu_params()) {
    clear_value();
    set_has_elu_params();
    value_.elu_params_ = CreateMaybeMessage< ::smaug::EluParams >(
        GetArenaNoVirtual());
  }
  return value_.elu_params_;
}
inline ::smaug::EluParams* ActivationParams::mutable_elu_params() {
  // @@protoc_insertion_point(field_mutable:smaug.ActivationParams.elu_params)
  return _internal_mutable_elu_params();
}

// .smaug.HardTanhParams hard_tanh_params = 4;
inline bool ActivationParams::_internal_has_hard_tanh_params() const {
  return value_case() == kHardTanhParams;
}
inline bool ActivationParams::has_hard_tanh_params() const {
  return _internal_has_hard_tanh_params();
}
inline void ActivationParams::set_has_hard_tanh_params() {
  _oneof_case_[0] = kHardTanhParams;
}
inline void ActivationParams::clear_hard_tanh_params() {
  if (_internal_has_hard_tanh_params()) {
    delete value_.hard_tanh_params_;
    clear_has_value();
  }
}
inline ::smaug::HardTanhParams* ActivationParams::release_hard_tanh_params() {
  // @@protoc_insertion_point(field_release:smaug.ActivationParams.hard_tanh_params)
  if (_internal_has_hard_tanh_params()) {
    clear_has_value();
      ::smaug::HardTanhParams* temp = value_.hard_tanh_params_;
    value_.hard_tanh_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::smaug::HardTanhParams& ActivationParams::_internal_hard_tanh_params() const {
  return _internal_has_hard_tanh_params()
      ? *value_.hard_tanh_params_
      : *reinterpret_cast< ::smaug::HardTanhParams*>(&::smaug::_HardTanhParams_default_instance_);
}
inline const ::smaug::HardTanhParams& ActivationParams::hard_tanh_params() const {
  // @@protoc_insertion_point(field_get:smaug.ActivationParams.hard_tanh_params)
  return _internal_hard_tanh_params();
}
inline ::smaug::HardTanhParams* ActivationParams::_internal_mutable_hard_tanh_params() {
  if (!_internal_has_hard_tanh_params()) {
    clear_value();
    set_has_hard_tanh_params();
    value_.hard_tanh_params_ = CreateMaybeMessage< ::smaug::HardTanhParams >(
        GetArenaNoVirtual());
  }
  return value_.hard_tanh_params_;
}
inline ::smaug::HardTanhParams* ActivationParams::mutable_hard_tanh_params() {
  // @@protoc_insertion_point(field_mutable:smaug.ActivationParams.hard_tanh_params)
  return _internal_mutable_hard_tanh_params();
}

inline bool ActivationParams::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void ActivationParams::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline ActivationParams::ValueCase ActivationParams::value_case() const {
  return ActivationParams::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Params

// .smaug.ConvParams conv_params = 1;
inline bool Params::_internal_has_conv_params() const {
  return value_case() == kConvParams;
}
inline bool Params::has_conv_params() const {
  return _internal_has_conv_params();
}
inline void Params::set_has_conv_params() {
  _oneof_case_[0] = kConvParams;
}
inline void Params::clear_conv_params() {
  if (_internal_has_conv_params()) {
    delete value_.conv_params_;
    clear_has_value();
  }
}
inline ::smaug::ConvParams* Params::release_conv_params() {
  // @@protoc_insertion_point(field_release:smaug.Params.conv_params)
  if (_internal_has_conv_params()) {
    clear_has_value();
      ::smaug::ConvParams* temp = value_.conv_params_;
    value_.conv_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::smaug::ConvParams& Params::_internal_conv_params() const {
  return _internal_has_conv_params()
      ? *value_.conv_params_
      : *reinterpret_cast< ::smaug::ConvParams*>(&::smaug::_ConvParams_default_instance_);
}
inline const ::smaug::ConvParams& Params::conv_params() const {
  // @@protoc_insertion_point(field_get:smaug.Params.conv_params)
  return _internal_conv_params();
}
inline ::smaug::ConvParams* Params::_internal_mutable_conv_params() {
  if (!_internal_has_conv_params()) {
    clear_value();
    set_has_conv_params();
    value_.conv_params_ = CreateMaybeMessage< ::smaug::ConvParams >(
        GetArenaNoVirtual());
  }
  return value_.conv_params_;
}
inline ::smaug::ConvParams* Params::mutable_conv_params() {
  // @@protoc_insertion_point(field_mutable:smaug.Params.conv_params)
  return _internal_mutable_conv_params();
}

// .smaug.PoolParams pool_params = 2;
inline bool Params::_internal_has_pool_params() const {
  return value_case() == kPoolParams;
}
inline bool Params::has_pool_params() const {
  return _internal_has_pool_params();
}
inline void Params::set_has_pool_params() {
  _oneof_case_[0] = kPoolParams;
}
inline void Params::clear_pool_params() {
  if (_internal_has_pool_params()) {
    delete value_.pool_params_;
    clear_has_value();
  }
}
inline ::smaug::PoolParams* Params::release_pool_params() {
  // @@protoc_insertion_point(field_release:smaug.Params.pool_params)
  if (_internal_has_pool_params()) {
    clear_has_value();
      ::smaug::PoolParams* temp = value_.pool_params_;
    value_.pool_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::smaug::PoolParams& Params::_internal_pool_params() const {
  return _internal_has_pool_params()
      ? *value_.pool_params_
      : *reinterpret_cast< ::smaug::PoolParams*>(&::smaug::_PoolParams_default_instance_);
}
inline const ::smaug::PoolParams& Params::pool_params() const {
  // @@protoc_insertion_point(field_get:smaug.Params.pool_params)
  return _internal_pool_params();
}
inline ::smaug::PoolParams* Params::_internal_mutable_pool_params() {
  if (!_internal_has_pool_params()) {
    clear_value();
    set_has_pool_params();
    value_.pool_params_ = CreateMaybeMessage< ::smaug::PoolParams >(
        GetArenaNoVirtual());
  }
  return value_.pool_params_;
}
inline ::smaug::PoolParams* Params::mutable_pool_params() {
  // @@protoc_insertion_point(field_mutable:smaug.Params.pool_params)
  return _internal_mutable_pool_params();
}

// .smaug.ConcatParams concat_params = 4;
inline bool Params::_internal_has_concat_params() const {
  return value_case() == kConcatParams;
}
inline bool Params::has_concat_params() const {
  return _internal_has_concat_params();
}
inline void Params::set_has_concat_params() {
  _oneof_case_[0] = kConcatParams;
}
inline void Params::clear_concat_params() {
  if (_internal_has_concat_params()) {
    delete value_.concat_params_;
    clear_has_value();
  }
}
inline ::smaug::ConcatParams* Params::release_concat_params() {
  // @@protoc_insertion_point(field_release:smaug.Params.concat_params)
  if (_internal_has_concat_params()) {
    clear_has_value();
      ::smaug::ConcatParams* temp = value_.concat_params_;
    value_.concat_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::smaug::ConcatParams& Params::_internal_concat_params() const {
  return _internal_has_concat_params()
      ? *value_.concat_params_
      : *reinterpret_cast< ::smaug::ConcatParams*>(&::smaug::_ConcatParams_default_instance_);
}
inline const ::smaug::ConcatParams& Params::concat_params() const {
  // @@protoc_insertion_point(field_get:smaug.Params.concat_params)
  return _internal_concat_params();
}
inline ::smaug::ConcatParams* Params::_internal_mutable_concat_params() {
  if (!_internal_has_concat_params()) {
    clear_value();
    set_has_concat_params();
    value_.concat_params_ = CreateMaybeMessage< ::smaug::ConcatParams >(
        GetArenaNoVirtual());
  }
  return value_.concat_params_;
}
inline ::smaug::ConcatParams* Params::mutable_concat_params() {
  // @@protoc_insertion_point(field_mutable:smaug.Params.concat_params)
  return _internal_mutable_concat_params();
}

// .smaug.SplitParams split_params = 5;
inline bool Params::_internal_has_split_params() const {
  return value_case() == kSplitParams;
}
inline bool Params::has_split_params() const {
  return _internal_has_split_params();
}
inline void Params::set_has_split_params() {
  _oneof_case_[0] = kSplitParams;
}
inline void Params::clear_split_params() {
  if (_internal_has_split_params()) {
    delete value_.split_params_;
    clear_has_value();
  }
}
inline ::smaug::SplitParams* Params::release_split_params() {
  // @@protoc_insertion_point(field_release:smaug.Params.split_params)
  if (_internal_has_split_params()) {
    clear_has_value();
      ::smaug::SplitParams* temp = value_.split_params_;
    value_.split_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::smaug::SplitParams& Params::_internal_split_params() const {
  return _internal_has_split_params()
      ? *value_.split_params_
      : *reinterpret_cast< ::smaug::SplitParams*>(&::smaug::_SplitParams_default_instance_);
}
inline const ::smaug::SplitParams& Params::split_params() const {
  // @@protoc_insertion_point(field_get:smaug.Params.split_params)
  return _internal_split_params();
}
inline ::smaug::SplitParams* Params::_internal_mutable_split_params() {
  if (!_internal_has_split_params()) {
    clear_value();
    set_has_split_params();
    value_.split_params_ = CreateMaybeMessage< ::smaug::SplitParams >(
        GetArenaNoVirtual());
  }
  return value_.split_params_;
}
inline ::smaug::SplitParams* Params::mutable_split_params() {
  // @@protoc_insertion_point(field_mutable:smaug.Params.split_params)
  return _internal_mutable_split_params();
}

// .smaug.PaddingParams padding_params = 6;
inline bool Params::_internal_has_padding_params() const {
  return value_case() == kPaddingParams;
}
inline bool Params::has_padding_params() const {
  return _internal_has_padding_params();
}
inline void Params::set_has_padding_params() {
  _oneof_case_[0] = kPaddingParams;
}
inline void Params::clear_padding_params() {
  if (_internal_has_padding_params()) {
    delete value_.padding_params_;
    clear_has_value();
  }
}
inline ::smaug::PaddingParams* Params::release_padding_params() {
  // @@protoc_insertion_point(field_release:smaug.Params.padding_params)
  if (_internal_has_padding_params()) {
    clear_has_value();
      ::smaug::PaddingParams* temp = value_.padding_params_;
    value_.padding_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::smaug::PaddingParams& Params::_internal_padding_params() const {
  return _internal_has_padding_params()
      ? *value_.padding_params_
      : *reinterpret_cast< ::smaug::PaddingParams*>(&::smaug::_PaddingParams_default_instance_);
}
inline const ::smaug::PaddingParams& Params::padding_params() const {
  // @@protoc_insertion_point(field_get:smaug.Params.padding_params)
  return _internal_padding_params();
}
inline ::smaug::PaddingParams* Params::_internal_mutable_padding_params() {
  if (!_internal_has_padding_params()) {
    clear_value();
    set_has_padding_params();
    value_.padding_params_ = CreateMaybeMessage< ::smaug::PaddingParams >(
        GetArenaNoVirtual());
  }
  return value_.padding_params_;
}
inline ::smaug::PaddingParams* Params::mutable_padding_params() {
  // @@protoc_insertion_point(field_mutable:smaug.Params.padding_params)
  return _internal_mutable_padding_params();
}

// .smaug.ActivationParams act_params = 3;
inline bool Params::_internal_has_act_params() const {
  return this != internal_default_instance() && act_params_ != nullptr;
}
inline bool Params::has_act_params() const {
  return _internal_has_act_params();
}
inline void Params::clear_act_params() {
  if (GetArenaNoVirtual() == nullptr && act_params_ != nullptr) {
    delete act_params_;
  }
  act_params_ = nullptr;
}
inline const ::smaug::ActivationParams& Params::_internal_act_params() const {
  const ::smaug::ActivationParams* p = act_params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::smaug::ActivationParams*>(
      &::smaug::_ActivationParams_default_instance_);
}
inline const ::smaug::ActivationParams& Params::act_params() const {
  // @@protoc_insertion_point(field_get:smaug.Params.act_params)
  return _internal_act_params();
}
inline ::smaug::ActivationParams* Params::release_act_params() {
  // @@protoc_insertion_point(field_release:smaug.Params.act_params)
  
  ::smaug::ActivationParams* temp = act_params_;
  act_params_ = nullptr;
  return temp;
}
inline ::smaug::ActivationParams* Params::_internal_mutable_act_params() {
  
  if (act_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::smaug::ActivationParams>(GetArenaNoVirtual());
    act_params_ = p;
  }
  return act_params_;
}
inline ::smaug::ActivationParams* Params::mutable_act_params() {
  // @@protoc_insertion_point(field_mutable:smaug.Params.act_params)
  return _internal_mutable_act_params();
}
inline void Params::set_allocated_act_params(::smaug::ActivationParams* act_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete act_params_;
  }
  if (act_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      act_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, act_params, submessage_arena);
    }
    
  } else {
    
  }
  act_params_ = act_params;
  // @@protoc_insertion_point(field_set_allocated:smaug.Params.act_params)
}

inline bool Params::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Params::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Params::ValueCase Params::value_case() const {
  return Params::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// NodeProto

// string name = 1;
inline void NodeProto::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeProto::name() const {
  // @@protoc_insertion_point(field_get:smaug.NodeProto.name)
  return _internal_name();
}
inline void NodeProto::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smaug.NodeProto.name)
}
inline std::string* NodeProto::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smaug.NodeProto.name)
  return _internal_mutable_name();
}
inline const std::string& NodeProto::_internal_name() const {
  return name_.GetNoArena();
}
inline void NodeProto::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodeProto::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:smaug.NodeProto.name)
}
inline void NodeProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:smaug.NodeProto.name)
}
inline void NodeProto::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:smaug.NodeProto.name)
}
inline std::string* NodeProto::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeProto::release_name() {
  // @@protoc_insertion_point(field_release:smaug.NodeProto.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:smaug.NodeProto.name)
}

// .smaug.OpType op = 2;
inline void NodeProto::clear_op() {
  op_ = 0;
}
inline ::smaug::OpType NodeProto::_internal_op() const {
  return static_cast< ::smaug::OpType >(op_);
}
inline ::smaug::OpType NodeProto::op() const {
  // @@protoc_insertion_point(field_get:smaug.NodeProto.op)
  return _internal_op();
}
inline void NodeProto::_internal_set_op(::smaug::OpType value) {
  
  op_ = value;
}
inline void NodeProto::set_op(::smaug::OpType value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:smaug.NodeProto.op)
}

// repeated string parents = 3;
inline int NodeProto::_internal_parents_size() const {
  return parents_.size();
}
inline int NodeProto::parents_size() const {
  return _internal_parents_size();
}
inline void NodeProto::clear_parents() {
  parents_.Clear();
}
inline std::string* NodeProto::add_parents() {
  // @@protoc_insertion_point(field_add_mutable:smaug.NodeProto.parents)
  return _internal_add_parents();
}
inline const std::string& NodeProto::_internal_parents(int index) const {
  return parents_.Get(index);
}
inline const std::string& NodeProto::parents(int index) const {
  // @@protoc_insertion_point(field_get:smaug.NodeProto.parents)
  return _internal_parents(index);
}
inline std::string* NodeProto::mutable_parents(int index) {
  // @@protoc_insertion_point(field_mutable:smaug.NodeProto.parents)
  return parents_.Mutable(index);
}
inline void NodeProto::set_parents(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:smaug.NodeProto.parents)
  parents_.Mutable(index)->assign(value);
}
inline void NodeProto::set_parents(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:smaug.NodeProto.parents)
  parents_.Mutable(index)->assign(std::move(value));
}
inline void NodeProto::set_parents(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  parents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:smaug.NodeProto.parents)
}
inline void NodeProto::set_parents(int index, const char* value, size_t size) {
  parents_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:smaug.NodeProto.parents)
}
inline std::string* NodeProto::_internal_add_parents() {
  return parents_.Add();
}
inline void NodeProto::add_parents(const std::string& value) {
  parents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:smaug.NodeProto.parents)
}
inline void NodeProto::add_parents(std::string&& value) {
  parents_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:smaug.NodeProto.parents)
}
inline void NodeProto::add_parents(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  parents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:smaug.NodeProto.parents)
}
inline void NodeProto::add_parents(const char* value, size_t size) {
  parents_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:smaug.NodeProto.parents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NodeProto::parents() const {
  // @@protoc_insertion_point(field_list:smaug.NodeProto.parents)
  return parents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NodeProto::mutable_parents() {
  // @@protoc_insertion_point(field_mutable_list:smaug.NodeProto.parents)
  return &parents_;
}

// repeated int32 src_tensors_indices = 5;
inline int NodeProto::_internal_src_tensors_indices_size() const {
  return src_tensors_indices_.size();
}
inline int NodeProto::src_tensors_indices_size() const {
  return _internal_src_tensors_indices_size();
}
inline void NodeProto::clear_src_tensors_indices() {
  src_tensors_indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeProto::_internal_src_tensors_indices(int index) const {
  return src_tensors_indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeProto::src_tensors_indices(int index) const {
  // @@protoc_insertion_point(field_get:smaug.NodeProto.src_tensors_indices)
  return _internal_src_tensors_indices(index);
}
inline void NodeProto::set_src_tensors_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  src_tensors_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:smaug.NodeProto.src_tensors_indices)
}
inline void NodeProto::_internal_add_src_tensors_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  src_tensors_indices_.Add(value);
}
inline void NodeProto::add_src_tensors_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_src_tensors_indices(value);
  // @@protoc_insertion_point(field_add:smaug.NodeProto.src_tensors_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
NodeProto::_internal_src_tensors_indices() const {
  return src_tensors_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
NodeProto::src_tensors_indices() const {
  // @@protoc_insertion_point(field_list:smaug.NodeProto.src_tensors_indices)
  return _internal_src_tensors_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
NodeProto::_internal_mutable_src_tensors_indices() {
  return &src_tensors_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
NodeProto::mutable_src_tensors_indices() {
  // @@protoc_insertion_point(field_mutable_list:smaug.NodeProto.src_tensors_indices)
  return _internal_mutable_src_tensors_indices();
}

// repeated .smaug.TensorProto input_tensors = 6;
inline int NodeProto::_internal_input_tensors_size() const {
  return input_tensors_.size();
}
inline int NodeProto::input_tensors_size() const {
  return _internal_input_tensors_size();
}
inline ::smaug::TensorProto* NodeProto::mutable_input_tensors(int index) {
  // @@protoc_insertion_point(field_mutable:smaug.NodeProto.input_tensors)
  return input_tensors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smaug::TensorProto >*
NodeProto::mutable_input_tensors() {
  // @@protoc_insertion_point(field_mutable_list:smaug.NodeProto.input_tensors)
  return &input_tensors_;
}
inline const ::smaug::TensorProto& NodeProto::_internal_input_tensors(int index) const {
  return input_tensors_.Get(index);
}
inline const ::smaug::TensorProto& NodeProto::input_tensors(int index) const {
  // @@protoc_insertion_point(field_get:smaug.NodeProto.input_tensors)
  return _internal_input_tensors(index);
}
inline ::smaug::TensorProto* NodeProto::_internal_add_input_tensors() {
  return input_tensors_.Add();
}
inline ::smaug::TensorProto* NodeProto::add_input_tensors() {
  // @@protoc_insertion_point(field_add:smaug.NodeProto.input_tensors)
  return _internal_add_input_tensors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smaug::TensorProto >&
NodeProto::input_tensors() const {
  // @@protoc_insertion_point(field_list:smaug.NodeProto.input_tensors)
  return input_tensors_;
}

// repeated .smaug.TensorProto output_tensors = 7;
inline int NodeProto::_internal_output_tensors_size() const {
  return output_tensors_.size();
}
inline int NodeProto::output_tensors_size() const {
  return _internal_output_tensors_size();
}
inline ::smaug::TensorProto* NodeProto::mutable_output_tensors(int index) {
  // @@protoc_insertion_point(field_mutable:smaug.NodeProto.output_tensors)
  return output_tensors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smaug::TensorProto >*
NodeProto::mutable_output_tensors() {
  // @@protoc_insertion_point(field_mutable_list:smaug.NodeProto.output_tensors)
  return &output_tensors_;
}
inline const ::smaug::TensorProto& NodeProto::_internal_output_tensors(int index) const {
  return output_tensors_.Get(index);
}
inline const ::smaug::TensorProto& NodeProto::output_tensors(int index) const {
  // @@protoc_insertion_point(field_get:smaug.NodeProto.output_tensors)
  return _internal_output_tensors(index);
}
inline ::smaug::TensorProto* NodeProto::_internal_add_output_tensors() {
  return output_tensors_.Add();
}
inline ::smaug::TensorProto* NodeProto::add_output_tensors() {
  // @@protoc_insertion_point(field_add:smaug.NodeProto.output_tensors)
  return _internal_add_output_tensors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smaug::TensorProto >&
NodeProto::output_tensors() const {
  // @@protoc_insertion_point(field_list:smaug.NodeProto.output_tensors)
  return output_tensors_;
}

// .smaug.Params params = 8;
inline bool NodeProto::_internal_has_params() const {
  return this != internal_default_instance() && params_ != nullptr;
}
inline bool NodeProto::has_params() const {
  return _internal_has_params();
}
inline void NodeProto::clear_params() {
  if (GetArenaNoVirtual() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
}
inline const ::smaug::Params& NodeProto::_internal_params() const {
  const ::smaug::Params* p = params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::smaug::Params*>(
      &::smaug::_Params_default_instance_);
}
inline const ::smaug::Params& NodeProto::params() const {
  // @@protoc_insertion_point(field_get:smaug.NodeProto.params)
  return _internal_params();
}
inline ::smaug::Params* NodeProto::release_params() {
  // @@protoc_insertion_point(field_release:smaug.NodeProto.params)
  
  ::smaug::Params* temp = params_;
  params_ = nullptr;
  return temp;
}
inline ::smaug::Params* NodeProto::_internal_mutable_params() {
  
  if (params_ == nullptr) {
    auto* p = CreateMaybeMessage<::smaug::Params>(GetArenaNoVirtual());
    params_ = p;
  }
  return params_;
}
inline ::smaug::Params* NodeProto::mutable_params() {
  // @@protoc_insertion_point(field_mutable:smaug.NodeProto.params)
  return _internal_mutable_params();
}
inline void NodeProto::set_allocated_params(::smaug::Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  params_ = params;
  // @@protoc_insertion_point(field_set_allocated:smaug.NodeProto.params)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace smaug

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_smaug_2fcore_2fnode_2eproto
