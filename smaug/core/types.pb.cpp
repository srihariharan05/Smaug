// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: smaug/core/types.proto

#include "smaug/core/types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace smaug {
}  // namespace smaug
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_smaug_2fcore_2ftypes_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_smaug_2fcore_2ftypes_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_smaug_2fcore_2ftypes_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_smaug_2fcore_2ftypes_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_smaug_2fcore_2ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026smaug/core/types.proto\022\005smaug*f\n\010DataT"
  "ype\022\023\n\017UnknownDataType\020\000\022\t\n\005Int32\020\001\022\t\n\005I"
  "nt64\020\002\022\013\n\007Float16\020\003\022\013\n\007Float32\020\004\022\013\n\007Floa"
  "t64\020\005\022\010\n\004Bool\020\006*z\n\nDataLayout\022\021\n\rUnknown"
  "Layout\020\000\022\010\n\004NCHW\020\001\022\010\n\004NHWC\020\002\022\006\n\002NC\020\004\022\006\n\002"
  "CN\020\010\022\007\n\003NCT\020\020\022\007\n\003NTC\020 \022\005\n\001N\020@\022\005\n\001X\020\177\022\021\n\r"
  "EndDataLayout\020@\032\002\020\001*v\n\021DataStorageFormat"
  "\022\030\n\024UnknownStorageFormat\020\000\022\020\n\014Uncompress"
  "ed\020\001\022\007\n\003CSR\020\002\022\r\n\tPackedCSR\020\003\022\035\n\031Uncompre"
  "ssedHalfPrecision\020\004*\246\003\n\006OpType\022\r\n\tUnknow"
  "nOp\020\000\022\021\n\rConvolution3d\020\001\022\030\n\024ConvolutionD"
  "epthwise\020\002\022\016\n\nMaxPooling\020\003\022\022\n\016AveragePoo"
  "ling\020\004\022\020\n\014InnerProduct\020\005\022\r\n\tBatchNorm\020\006\022"
  "\010\n\004Data\020\007\022\010\n\004ReLU\020\010\022\t\n\005LReLU\020\t\022\007\n\003ELU\020\n\022"
  "\010\n\004SELU\020\013\022\010\n\004Tanh\020\014\022\014\n\010HardTanh\020\r\022\013\n\007Sig"
  "moid\020\016\022\013\n\007Softmax\020\017\022\016\n\nEltwiseAdd\020\020\022\013\n\007R"
  "eorder\020\021\022\016\n\nEltwiseMul\020\022\022\n\n\006Concat\020\023\022\t\n\005"
  "Split\020\024\022\013\n\007Reshape\020\025\022\n\n\006Repeat\020\026\022\010\n\004Less"
  "\020\027\022\r\n\tLessEqual\020\030\022\013\n\007Greater\020\031\022\020\n\014Greate"
  "rEqual\020\032\022\n\n\006Switch\020\033\022\t\n\005Merge\020\034\022\013\n\007Paddi"
  "ng\020\035*D\n\013PaddingType\022\022\n\016UnknownPadding\020\000\022"
  "\017\n\013SamePadding\020\001\022\020\n\014ValidPadding\020\002*l\n\026Ho"
  "stMemoryAccessPolicy\022\027\n\023UnknownMemoryPol"
  "icy\020\000\022\n\n\006AllDma\020\001\022\n\n\006AllAcp\020\002\022\033\n\027AllAcpW"
  "ithDmaForWeights\020\004\"\004\010\003\020\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_smaug_2fcore_2ftypes_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_smaug_2fcore_2ftypes_2eproto_sccs[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_smaug_2fcore_2ftypes_2eproto_once;
static bool descriptor_table_smaug_2fcore_2ftypes_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_smaug_2fcore_2ftypes_2eproto = {
  &descriptor_table_smaug_2fcore_2ftypes_2eproto_initialized, descriptor_table_protodef_smaug_2fcore_2ftypes_2eproto, "smaug/core/types.proto", 992,
  &descriptor_table_smaug_2fcore_2ftypes_2eproto_once, descriptor_table_smaug_2fcore_2ftypes_2eproto_sccs, descriptor_table_smaug_2fcore_2ftypes_2eproto_deps, 0, 0,
  schemas, file_default_instances, TableStruct_smaug_2fcore_2ftypes_2eproto::offsets,
  file_level_metadata_smaug_2fcore_2ftypes_2eproto, 0, file_level_enum_descriptors_smaug_2fcore_2ftypes_2eproto, file_level_service_descriptors_smaug_2fcore_2ftypes_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_smaug_2fcore_2ftypes_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_smaug_2fcore_2ftypes_2eproto), true);
namespace smaug {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_smaug_2fcore_2ftypes_2eproto);
  return file_level_enum_descriptors_smaug_2fcore_2ftypes_2eproto[0];
}
bool DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataLayout_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_smaug_2fcore_2ftypes_2eproto);
  return file_level_enum_descriptors_smaug_2fcore_2ftypes_2eproto[1];
}
bool DataLayout_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 127:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataStorageFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_smaug_2fcore_2ftypes_2eproto);
  return file_level_enum_descriptors_smaug_2fcore_2ftypes_2eproto[2];
}
bool DataStorageFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OpType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_smaug_2fcore_2ftypes_2eproto);
  return file_level_enum_descriptors_smaug_2fcore_2ftypes_2eproto[3];
}
bool OpType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PaddingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_smaug_2fcore_2ftypes_2eproto);
  return file_level_enum_descriptors_smaug_2fcore_2ftypes_2eproto[4];
}
bool PaddingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HostMemoryAccessPolicy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_smaug_2fcore_2ftypes_2eproto);
  return file_level_enum_descriptors_smaug_2fcore_2ftypes_2eproto[5];
}
bool HostMemoryAccessPolicy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace smaug
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
